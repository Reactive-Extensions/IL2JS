//*************************************************************************************************
// WARNING:
// *** AUTOMATICALLY GENERATED by ResourceClassGenerator from y:FrameworkMessages.resx ***
// DO NOT MODIFY THIS FILE, IT WILL BE OVERWRITTEN BY THE BUILD SYSTEM
// This class contains strongly typed wrappers for resources in y:FrameworkMessages.resx
//
// Copyright(c) Microsoft Corporation, 2003
//*************************************************************************************************

namespace Microsoft.VisualStudio.TestTools.Resources {

using System;
using System.Resources;
using System.Diagnostics;
using System.Globalization;
    using Microsoft.VisualStudio.TestTools.UnitTesting;

/// <summary>
/// Strongly typed resource wrappers generated from y:FrameworkMessages.resx.
/// </summary>
internal class FrameworkMessages
{
    internal static readonly ResourceManager ResourceManager = new ResourceManager(typeof(FrameworkMessages));

    /// <summary>
    /// Access string has invalid syntax.
    /// </summary>
    public static UtfMessage AccessStringInvalidSyntax
    {
        get
        {
            return new UtfMessage("AccessStringInvalidSyntax", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// The expected collection contains {1} occurrence(s) of &lt;{2}&gt;. The actual collection contains {3} occurrence(s). {0}
    /// </summary>
    public static UtfMessage ActualHasMismatchedElements(object param0, object param1, object param2, object param3)
    {
        Object[] o = { param0, param1, param2, param3 };
        return new UtfMessage("ActualHasMismatchedElements", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Duplicate item found:&lt;{1}&gt;. {0}
    /// </summary>
    public static UtfMessage AllItemsAreUniqueFailMsg(object param0, object param1)
    {
        Object[] o = { param0, param1 };
        return new UtfMessage("AllItemsAreUniqueFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}
    /// </summary>
    public static UtfMessage AreEqualFailMsg(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("AreEqualFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Expected a difference no greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}
    /// </summary>
    public static UtfMessage AreEqualDeltaFailMsg(object param0, object param1, object param2, object param3)
    {
        Object[] o = { param0, param1, param2, param3 };
        return new UtfMessage("AreEqualDeltaFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Expected:&lt;{1}&gt;. Case is different for actual value:&lt;{2}&gt;. {0}
    /// </summary>
    public static UtfMessage AreEqualCaseFailMsg(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("AreEqualCaseFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Expected:&lt;{1} ({2})&gt;. Actual:&lt;{3} ({4})&gt;. {0}
    /// </summary>
    public static UtfMessage AreEqualDifferentTypesFailMsg(object param0, object param1, object param2, object param3, object param4)
    {
        Object[] o = { param0, param1, param2, param3, param4 };
        return new UtfMessage("AreEqualDifferentTypesFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Expected any value except:&lt;{1}&gt;. Actual:&lt;{2}&gt;. {0}
    /// </summary>
    public static UtfMessage AreNotEqualFailMsg(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("AreNotEqualFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Expected a difference greater than &lt;{3}&gt; between expected value &lt;{1}&gt; and actual value &lt;{2}&gt;. {0}
    /// </summary>
    public static UtfMessage AreNotEqualDeltaFailMsg(object param0, object param1, object param2, object param3)
    {
        Object[] o = { param0, param1, param2, param3 };
        return new UtfMessage("AreNotEqualDeltaFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Do not pass value types to AreSame(). Values converted to Object will never be the same. Consider using AreEqual(). {0}
    /// </summary>
    public static UtfMessage AreSameGivenValues(object param0)
    {
        Object[] o = { param0 };
        return new UtfMessage("AreSameGivenValues", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Both collections are empty. {0}
    /// </summary>
    public static UtfMessage BothCollectionsEmpty(object param0)
    {
        Object[] o = { param0 };
        return new UtfMessage("BothCollectionsEmpty", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Both collection contain same elements.
    /// </summary>
    public static UtfMessage BothCollectionsSameElements
    {
        get
        {
            return new UtfMessage("BothCollectionsSameElements", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Both collection references point to the same collection object. {0}
    /// </summary>
    public static UtfMessage BothCollectionsSameReference(object param0)
    {
        Object[] o = { param0 };
        return new UtfMessage("BothCollectionsSameReference", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Both collections contain the same elements. {0}
    /// </summary>
    public static UtfMessage BothSameElements(object param0)
    {
        Object[] o = { param0 };
        return new UtfMessage("BothSameElements", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// {0}({1})
    /// </summary>
    public static UtfMessage CollectionEqualReason(object param0, object param1)
    {
        Object[] o = { param0, param1 };
        return new UtfMessage("CollectionEqualReason", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// String '{0}' does not contain string '{1}'. {2}.
    /// </summary>
    public static UtfMessage ContainsFail(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("ContainsFail", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// The number of elements in the collections do not match. Expected:&lt;{1}&gt;. Actual:&lt;{2}&gt;.{0}
    /// </summary>
    public static UtfMessage ElementNumbersDontMatch(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("ElementNumbersDontMatch", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Element at index {0} do not match.
    /// </summary>
    public static UtfMessage ElementsAtIndexDontMatch(object param0)
    {
        Object[] o = { param0 };
        return new UtfMessage("ElementsAtIndexDontMatch", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Element at index {1} is not of expected type. Expected type:&lt;{2}&gt;. Actual type:&lt;{3}&gt;.{0}
    /// </summary>
    public static UtfMessage ElementTypesAtIndexDontMatch(object param0, object param1, object param2, object param3)
    {
        Object[] o = { param0, param1, param2, param3 };
        return new UtfMessage("ElementTypesAtIndexDontMatch", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Element at index {1} is (null). Expected type:&lt;{2}&gt;.{0}
    /// </summary>
    public static UtfMessage ElementTypesAtIndexDontMatch2(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("ElementTypesAtIndexDontMatch2", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// String '{0}' does not end with string '{1}'. {2}.
    /// </summary>
    public static UtfMessage EndsWithFail(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("EndsWithFail", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// eq1 equals eq2
    /// </summary>
    public static UtfMessage Equal_1_2
    {
        get
        {
            return new UtfMessage("Equal_1_2", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// eq1 not equals null
    /// </summary>
    public static UtfMessage Equal_1_n
    {
        get
        {
            return new UtfMessage("Equal_1_n", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// eq2 equals eq1
    /// </summary>
    public static UtfMessage Equal_2_1
    {
        get
        {
            return new UtfMessage("Equal_2_1", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// eq2 not equals null
    /// </summary>
    public static UtfMessage Equal_2_n
    {
        get
        {
            return new UtfMessage("Equal_2_n", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// child not equals null
    /// </summary>
    public static UtfMessage Equal_ch_n
    {
        get
        {
            return new UtfMessage("Equal_ch_n", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// diff not equals null
    /// </summary>
    public static UtfMessage Equal_d_n
    {
        get
        {
            return new UtfMessage("Equal_d_n", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Invalid argument- EqualsTester can't use nulls.
    /// </summary>
    public static UtfMessage EqualsTesterInvalidArgs
    {
        get
        {
            return new UtfMessage("EqualsTesterInvalidArgs", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Cannot convert object of type {0} to {1}.
    /// </summary>
    public static UtfMessage ErrorInvalidCast(object param0, object param1)
    {
        Object[] o = { param0, param1 };
        return new UtfMessage("ErrorInvalidCast", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// {0} failed. {1}
    /// </summary>
    public static UtfMessage AssertionFailed(object param0, object param1)
    {
        Object[] o = { param0, param1 };
        return new UtfMessage("AssertionFailed", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Hash codes for eq1 and eq2 match.
    /// </summary>
    public static UtfMessage HashTesterHashMatch_Eq1_Eq2
    {
        get
        {
            return new UtfMessage("HashTesterHashMatch_Eq1_Eq2", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Hash codes for eq1 and diff match.
    /// </summary>
    public static UtfMessage HashTesterHashNotMatch_Eq1
    {
        get
        {
            return new UtfMessage("HashTesterHashNotMatch_Eq1", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Hash codes for eq2 and diff do not match.
    /// </summary>
    public static UtfMessage HashTesterHashNotMatch_Eq2
    {
        get
        {
            return new UtfMessage("HashTesterHashNotMatch_Eq2", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Invalid argument- different types of first and second.
    /// </summary>
    public static UtfMessage HashTesterTypeMisMatch_1_2
    {
        get
        {
            return new UtfMessage("HashTesterTypeMisMatch_1_2", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// Invalid argument- different types of first and third.
    /// </summary>
    public static UtfMessage HashTesterTypeMisMatch_1_3
    {
        get
        {
            return new UtfMessage("HashTesterTypeMisMatch_1_3", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// The internal object referenced is no longer valid.
    /// </summary>
    public static UtfMessage InternalObjectNotValid
    {
        get
        {
            return new UtfMessage("InternalObjectNotValid", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// The parameter '{0}' is invalid. {1}.
    /// </summary>
    public static UtfMessage InvalidParameterToAssert(object param0, object param1)
    {
        Object[] o = { param0, param1 };
        return new UtfMessage("InvalidParameterToAssert", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// {0}Expected type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;.
    /// </summary>
    public static UtfMessage IsInstanceOfFailMsg(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("IsInstanceOfFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// String '{0}' does not match pattern '{1}'. {2}.
    /// </summary>
    public static UtfMessage IsMatchFail(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("IsMatchFail", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Wrong Type:&lt;{1}&gt;. Actual type:&lt;{2}&gt;. {0}
    /// </summary>
    public static UtfMessage IsNotInstanceOfFailMsg(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("IsNotInstanceOfFailMsg", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// String '{0}' matches pattern '{1}'. {2}.
    /// </summary>
    public static UtfMessage IsNotMatchFail(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("IsNotMatchFail", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Assert.Equals should not be used for Assertions. Please use Assert.AreEqual &amp; overloads instead.
    /// </summary>
    public static UtfMessage DoNotUseAssertEquals
    {
        get
        {
            return new UtfMessage("DoNotUseAssertEquals", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// 
    ///       The member specified ({0}) could not be found. You might need to regenerate your private accessor,
    ///       or the member may be private and defined on a base class. If the latter is true, you need to pass the type
    ///       that defines the member into PrivateObject's constructor.
    ///     
    /// </summary>
    public static UtfMessage PrivateAccessorMemberNotFound(object param0)
    {
        Object[] o = { param0 };
        return new UtfMessage("PrivateAccessorMemberNotFound", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// 
    ///       The constructor with the specified signature could not be found. You might need to regenerate your private accessor,
    ///       or the member may be private and defined on a base class. If the latter is true, you need to pass the type
    ///       that defines the member into PrivateObject's constructor.
    ///     
    /// </summary>
    public static UtfMessage PrivateAccessorConstructorNotFound
    {
        get
        {
            return new UtfMessage("PrivateAccessorConstructorNotFound", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// eq1 not equals child
    /// </summary>
    public static UtfMessage NotEqual_1_ch
    {
        get
        {
            return new UtfMessage("NotEqual_1_ch", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// eq1 not equals diff
    /// </summary>
    public static UtfMessage NotEqual_1_d
    {
        get
        {
            return new UtfMessage("NotEqual_1_d", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// eq2 not equals diff
    /// </summary>
    public static UtfMessage NotEqual_2_d
    {
        get
        {
            return new UtfMessage("NotEqual_2_d", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// child not equals eq1
    /// </summary>
    public static UtfMessage NotEqual_ch_1
    {
        get
        {
            return new UtfMessage("NotEqual_ch_1", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// child not equals diff
    /// </summary>
    public static UtfMessage NotEqual_ch_d
    {
        get
        {
            return new UtfMessage("NotEqual_ch_d", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// diff not equals eq1
    /// </summary>
    public static UtfMessage NotEqual_d_1
    {
        get
        {
            return new UtfMessage("NotEqual_d_1", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// diff not equals eq2
    /// </summary>
    public static UtfMessage NotEqual_d_2
    {
        get
        {
            return new UtfMessage("NotEqual_d_2", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// diff not equals child
    /// </summary>
    public static UtfMessage NotEqual_d_ch
    {
        get
        {
            return new UtfMessage("NotEqual_d_ch", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// The parameter '{0}' is invalid. The value cannot be null. {1}.
    /// </summary>
    public static UtfMessage NullParameterToAssert(object param0, object param1)
    {
        Object[] o = { param0, param1 };
        return new UtfMessage("NullParameterToAssert", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// Different number of elements.
    /// </summary>
    public static UtfMessage NumberOfElementsDiff
    {
        get
        {
            return new UtfMessage("NumberOfElementsDiff", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// String '{0}' does not start with string '{1}'. {2}.
    /// </summary>
    public static UtfMessage StartsWithFail(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("StartsWithFail", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// The property {0} has type {1}; expected type {2}.
    /// </summary>
    public static UtfMessage InvalidPropertyType(object param0, object param1, object param2)
    {
        Object[] o = { param0, param1, param2 };
        return new UtfMessage("InvalidPropertyType", typeof(FrameworkMessages), ResourceManager, o);
    }

    /// <summary>
    /// (null)
    /// </summary>
    public static UtfMessage Common_NullInMessages
    {
        get
        {
            return new UtfMessage("Common_NullInMessages", typeof(FrameworkMessages), ResourceManager, null);
        }
    }

    /// <summary>
    /// (object)
    /// </summary>
    public static UtfMessage Common_ObjectString
    {
        get
        {
            return new UtfMessage("Common_ObjectString", typeof(FrameworkMessages), ResourceManager, null);
        }
    }
}

}   // namespace
