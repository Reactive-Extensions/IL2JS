<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Compiler</name>
    </assembly>
    <members>
        <member name="M:System.Compiler.GlobalAssemblyCache.Contains(System.Uri)">
            <param name="codeBaseUri">Uri pointing to the assembly</param>
        </member>
        <member name="M:System.Compiler.GlobalAssemblyCache.GetLocation(System.Compiler.AssemblyReference)">
            <summary>
            Returns the original location of the corresponding assembly if available, otherwise returns the location of the shadow copy.
            If the corresponding assembly is not in the GAC, null is returned.
            </summary>
        </member>
        <member name="T:System.Compiler.Comparer">
            <summary>
            Performs a deep value comparison between two IR trees of the same type.
            </summary>
        </member>
        <member name="M:System.Compiler.Comparer.GetDifferences(System.Compiler.Node,System.Compiler.Node)">
            <summary>
            Gets a difference object representing the differences between node1 and node2. Caches the result and returns it for subsequent calls.
            I.e. this is a caching factory method for Differences instances. Calls GetNewDifferences to construct new instances when needed.
            </summary>
        </member>
        <member name="T:System.Compiler.DoubleVisitor">
            <summary>
            Base for all classes that process two IR trees, possibily transforming one of them.
            </summary>
        </member>
        <member name="M:System.Compiler.DoubleVisitor.Visit(System.Compiler.Node,System.Compiler.Node)">
            <summary>
            Switches on node.NodeType to call a visitor method that has been specialized for node.
            </summary>
            <returns> Returns null if node1 is null. Otherwise returns an updated node (possibly a different object).</returns>
        </member>
        <member name="M:System.Compiler.DoubleVisitor.TransferStateTo(System.Compiler.DoubleVisitor)">
            <summary>
            Transfers the state from one visitor to another. This enables separate visitor instances to cooperative process a single IR.
            </summary>
        </member>
        <member name="T:System.Compiler.StandardDoubleVisitor">
            <summary>
            Walks an IR, mutuating it into a new form
            </summary>   
        </member>
        <member name="T:System.Compiler.Duplicator">
            <summary>
            Walks an IR, duplicating it while fixing up self references to point to the duplicate IR. Only good for one duplication. 
            Largest unit of duplication is a single module.
            </summary>
        </member>
        <member name="T:System.Compiler.StandardVisitor">
            <summary>
            Walks an IR, mutuating it into a new form
            </summary>   
        </member>
        <member name="T:System.Compiler.Visitor">
            <summary>
            Base for all classes that process the IR using the visitor pattern.
            </summary>
        </member>
        <member name="M:System.Compiler.Visitor.Visit(System.Compiler.Node)">
            <summary>
            Switches on node.NodeType to call a visitor method that has been specialized for node.
            </summary>
            <param name="node">The node to be visited.</param>
            <returns> Returns null if node is null. Otherwise returns an updated node (possibly a different object).</returns>
        </member>
        <member name="M:System.Compiler.Visitor.TransferStateTo(System.Compiler.Visitor)">
            <summary>
            Transfers the state from one visitor to another. This enables separate visitor instances to cooperative process a single IR.
            </summary>
        </member>
        <member name="M:System.Compiler.StandardVisitor.GetTypeView(System.Compiler.TypeNode)">
            <summary>
            Return the current scope's view of the argument type, by asking the current scope's type viewer.
            </summary>
        </member>
        <member name="P:System.Compiler.StandardVisitor.TypeViewer">
            <summary>
            Return a type viewer for the current scope.
            [The type viewer acts like the identity function, except for dialects (e.g. Extensible Sing#)
            that allow extensions and differing views of types.]
            null can be returned to represent an identity-function type viewer.
            </summary>
        </member>
        <member name="M:System.Compiler.Duplicator.#ctor(System.Compiler.Module,System.Compiler.TypeNode)">
            <param name="module">The module into which the duplicate IR will be grafted.</param>
            <param name="type">The type into which the duplicate Member will be grafted. Ignored if entire type, or larger unit is duplicated.</param>
        </member>
        <member name="T:System.Compiler.BinaryWriter">
            <summary>
            High performance replacement for System.IO.BinaryWriter.
            </summary>
        </member>
        <member name="T:System.Compiler.BetterPath">
            <summary>
            A version of System.IO.Path that does not throw exceptions.
            </summary>
        </member>
        <member name="M:System.Compiler.MemberList.Remove(System.Compiler.Member)">
            <summary>
            Removes member (by nulling slot) if present
            </summary>
        </member>
        <member name="T:System.Compiler.Metadata.MemoryMappedFile">
            <summary>
            Public only for use by the Framework. Do not use this class.
            Well, if you really really must, use it only if you can tolerate keeping the file locked for at least as long as any Identifier
            derived from the file stays alive.
            </summary>   
        </member>
        <member name="T:System.Compiler.ISourceText">
            <summary>
            This interface can be used to link an arbitrary source text provider into an IR tree via a DocumentText instance.
            </summary>
        </member>
        <member name="M:System.Compiler.ISourceText.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts with the character at the specified index and has a specified length.
            </summary>
        </member>
        <member name="M:System.Compiler.ISourceText.MakeCollectible">
            <summary>
            Indicates that the text has been fully scanned and futher references to the text are expected to be infrequent.
            The underlying object can now choose to clear cached information if it comes under resource pressure.
            </summary>
        </member>
        <member name="P:System.Compiler.ISourceText.Length">
            <summary>
            The number of characters in the source text. 
            A "character" corresponds to a System.Char which is actually a Unicode UTF16 code point to be precise.
            </summary>
        </member>
        <member name="P:System.Compiler.ISourceText.Item(System.Int32)">
            <summary>
            Retrieves the character at the given position. The first character is at position zero.
            </summary>
        </member>
        <member name="P:System.Compiler.ISourceTextBuffer.Buffer">
            <summary>
            Returns null unless the implementer is based on an ASCII buffer that stays alive as long at the implementer itself.
            An implementer that returns a non-null value is merely a wrapper to keep the buffer alive. No further methods will
            be called on the interface in this case.
            </summary>
        </member>
        <member name="T:System.Compiler.CollectibleSourceText">
            <summary>
            Use this after a source text has already been scanned and parsed. This allows the source text to get released
            if there is memory pressure, while still allowing portions of it to be retrieved on demand. This is useful when
            a large number of source files are read in, but only infrequent references are made to them.
            </summary>
        </member>
        <member name="T:System.Compiler.StringSourceText">
            <summary>
            This class is used to wrap the string contents of a source file with an ISourceText interface. It is used while compiling
            a project the first time in order to obtain a symbol table. After that the StringSourceText instance is typically replaced with
            a CollectibleSourceText instance, so that the actual source text string can be collected. When a file is edited, 
            and the editor does not provide its own ISourceText wrapper for its edit buffer, this class can be used to wrap a copy of the edit buffer.
            </summary>
        </member>
        <member name="F:System.Compiler.StringSourceText.SourceText">
            <summary>
            The wrapped string used to implement ISourceText. Use this value when unwrapping.
            </summary>
        </member>
        <member name="F:System.Compiler.StringSourceText.IsSameAsFileContents">
            <summary>
            True when the wrapped string is the contents of a file. Typically used to check if it safe to replace this
            StringSourceText instance with a CollectibleSourceText instance.
            </summary>
        </member>
        <member name="T:System.Compiler.DocumentText">
            <summary>
            This class provides a uniform interface to program sources provided in the form of Unicode strings,
            unsafe pointers to ascii buffers (as obtained from a memory mapped file, for instance) as well as
            arbitrary source text providers that implement the ISourceText interface.
            </summary>
        </member>
        <member name="F:System.Compiler.DocumentText.AsciiStringPtr">
            <summary>
            If this is not null it is used to obtain 8-bit ASCII characters.
            </summary>
        </member>
        <member name="F:System.Compiler.DocumentText.Source">
            <summary>
            If this is not null it represents a Unicode string encoded as UTF16.
            </summary>
        </member>
        <member name="F:System.Compiler.DocumentText.TextProvider">
            <summary>
            If this is not null the object implement ISourceText provides some way to get at individual characters and substrings.
            </summary>
        </member>
        <member name="F:System.Compiler.DocumentText.Length">
            <summary>
            The number of characters in the source document. 
            A "character" corresponds to a System.Char which is actually a Unicode UTF16 code point to be precise.
            </summary>
        </member>
        <member name="M:System.Compiler.DocumentText.Equals(System.String,System.Int32,System.Int32)">
            <summary>
            Compare this.Substring(offset, length) for equality with str.
            Call this only if str.Length is known to be equal to length.
            </summary>
        </member>
        <member name="M:System.Compiler.DocumentText.Equals(System.Int32,System.Compiler.DocumentText,System.Int32,System.Int32)">
            <summary>
            Compares the substring of the specificied length starting at offset, with the substring in DocumentText starting at textOffset.
            </summary>
            <param name="offset">The index of the first character of the substring of this DocumentText.</param>
            <param name="text">The Document text with the substring being compared to.</param>
            <param name="textOffset">The index of the first character of the substring of the DocumentText being compared to.</param>
            <param name="length">The number of characters in the substring being compared.</param>
            <returns></returns>
        </member>
        <member name="M:System.Compiler.DocumentText.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.
            </summary>
        </member>
        <member name="P:System.Compiler.DocumentText.Item(System.Int32)">
            <summary>
            Retrieves the character at the given position. The first character is at position zero.
            </summary>
        </member>
        <member name="T:System.Compiler.Document">
            <summary>
            A source document from which an Abstract Syntax Tree has been derived.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.DocumentType">
            <summary>
            A Guid that identifies the kind of document to applications such as a debugger. Typically System.Diagnostics.SymbolStore.SymDocumentType.Text.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.Language">
            <summary>
            A Guid that identifies the programming language used in the source document. Typically used by a debugger to locate language specific logic.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.LanguageVendor">
            <summary>
            A Guid that identifies the compiler vendor programming language used in the source document. Typically used by a debugger to locate vendor specific logic.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.LineNumber">
            <summary>
            The line number corresponding to the first character in Text. Typically 1 but can be changed by C# preprocessor directives. 
            </summary>
        </member>
        <member name="F:System.Compiler.Document.Hidden">
            <summary>
            Indicates that the document contains machine generated source code that should not show up in tools such as debuggers.
            Can be set by C# preprocessor directives.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.Name">
            <summary>
            The name of the document. Typically a file name. Can be a full or relative file path, or a URI or some other kind of identifier.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.Text">
            <summary>
            Contains the source text.
            </summary>
        </member>
        <member name="M:System.Compiler.Document.GetLine(System.Int32)">
            <summary>
            Maps the given zero based character position to the number of the source line containing the same character. 
            Line number counting starts from the value of LineNumber.
            </summary>
        </member>
        <member name="M:System.Compiler.Document.GetColumn(System.Int32)">
            <summary>
            Maps the given zero based character position in the entire text to the position of the same character in a source line.
            Counting within the source line starts at 1.
            </summary>
        </member>
        <member name="M:System.Compiler.Document.GetOffsets(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Given a startLine, startColum, endLine and endColumn, this returns the corresponding startPos and endPos. In other words it
            converts a range expression in line and columns to a range expressed as a start and end character position.
            </summary>
            <param name="startLine">The number of the line containing the first character. The number of the first line equals this.LineNumber.</param>
            <param name="startColumn">The position of the first character relative to the start of the line. Counting from 1.</param>
            <param name="endLine">The number of the line contain the character that immediate follows the last character of the range.</param>
            <param name="endColumn">The position, in the last line, of the character that immediately follows the last character of the range.</param>
            <param name="startPos">The position in the entire text of the first character of the range, counting from 0.</param>
            <param name="endPos">The position in the entire text of the character following the last character of the range.</param>
        </member>
        <member name="M:System.Compiler.Document.Substring(System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from the text of this Document. The substring starts at a specified character position and has a specified length.
            </summary>
        </member>
        <member name="M:System.Compiler.Document.GetLineCount(System.String)">
            <summary>
            Counts the number of end of line marker sequences in the given text.
            </summary>
        </member>
        <member name="F:System.Compiler.Document.lineOffsets">
            <summary>An array of offsets, with offset at index i corresponding to the position of the first character of line i, (counting lines from 0).</summary>
        </member>
        <member name="F:System.Compiler.Document.lines">
            <summary>The number of lines in Text.</summary>
        </member>
        <member name="M:System.Compiler.Document.Search(System.Int32)">
            <summary>
             Returns the index in this.lineOffsets array such that this.lineOffsets[index] is less than or equal to offset
             and offset is less than lineOffsets[index+1]
            </summary>
        </member>
        <member name="M:System.Compiler.Document.GetPosition(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Maps the given zero based character position in the entire text to a (line, column) pair corresponding to the same position.
            Counting within the source line starts at 0. Counting source lines start at 0.
            </summary>
        </member>
        <member name="M:System.Compiler.Document.AddOffset(System.Int32)">
            <summary>
            Adds the given offset to the this.lineOffsets table as the offset corresponding to the start of line this.lines+1.
            </summary>
        </member>
        <member name="M:System.Compiler.Document.ComputeLineOffsets">
            <summary>
            Populates this.lineOffsets with an array of offsets, with offset at index i corresponding to the position of the first
            character of line i, (counting lines from 0).
            </summary>
        </member>
        <member name="F:System.Compiler.Document.uniqueKeyCounter">
            <summary> Add one to this every time a Document instance gets a unique key.</summary>
        </member>
        <member name="P:System.Compiler.Document.UniqueKey">
            <summary>
            An integer that uniquely distinguishes this document instance from every other document instance. 
            This provides an efficient equality test to facilitate hashing.
            </summary>
        </member>
        <member name="T:System.Compiler.DocumentWithPrecomputedLineNumbers">
            <summary>
            For creating source contexts that have just a filename, start line and column and end line and column.
            If a SourceContext has a DocumentWithPrecomputedLineNumbers as its Document, then it should have 0 as its StartPos
            and 1 as its EndPos because those are used here to decide what to return.
            </summary>
        </member>
        <member name="T:System.Compiler.SourceContext">
            <summary>
            Records a location within a source document that corresponds to an Abstract Syntax Tree node.
            </summary>
        </member>
        <member name="F:System.Compiler.SourceContext.Document">
            <summary>The source document within which the AST node is located. Null if the node is not derived from a source document.</summary>
        </member>
        <member name="F:System.Compiler.SourceContext.EndPos">
            <summary>
            The zero based index of the first character beyond  the last character in the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="F:System.Compiler.SourceContext.StartPos">
            <summary>
            The zero based index of the first character in the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="M:System.Compiler.SourceContext.Encloses(System.Int32,System.Int32)">
            <summary>
            Returns true if the line and column is greater than or equal the position of the first character 
            and less than or equal to the position of the last character
            of the source document that corresponds to the AST node.
            </summary>
            <param name="line">A line number(counting from Document.LineNumber)</param>
            <param name="column">A column number (counting from one)</param>
            <returns></returns>
        </member>
        <member name="P:System.Compiler.SourceContext.StartLine">
            <summary>
            The number (counting from Document.LineNumber) of the line containing the first character in the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="P:System.Compiler.SourceContext.StartColumn">
            <summary>
            The number (counting from one) of the line column containing the first character in the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="P:System.Compiler.SourceContext.EndLine">
            <summary>
            The number (counting from Document.LineNumber) of the line containing the first character beyond the last character in the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="P:System.Compiler.SourceContext.EndColumn">
            <summary>
            The number (counting from one) of the line column containing first character beyond the last character in the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="P:System.Compiler.SourceContext.SourceText">
            <summary>
            The substring of the source document that corresponds to the AST node.
            </summary>
        </member>
        <member name="T:System.Compiler.CompilerSite">
            <summary>
            Allows a compilation to output progress messages and to query if cancellation was requested.
            </summary>
        </member>
        <member name="T:System.Compiler.NodeType">
            0-: Common
            1000-: HScript
            2000-: EcmaScript
            3000-: Zonnon
            4000-: Comega
            5000-: X++
            6000-: Spec#
            7000-: Sing#
            8000-: Xaml
            9000-: C/AL
            For your range contact hermanv@microsoft.com
        </member>
        <member name="T:System.Compiler.Node">
            <summary>
            A node in an Abstract Syntax Tree.
            </summary>
        </member>
        <member name="F:System.Compiler.Node.SourceContext">
            <summary>
            The region in the source code that contains the concrete syntax corresponding to this node in the Abstract Syntax Tree.
            </summary>
        </member>
        <member name="M:System.Compiler.Node.Clone">
            <summary>
            Makes a shallow copy of the node.
            </summary>
            <returns>A shallow copy of the node</returns>
        </member>
        <member name="P:System.Compiler.Node.NodeType">
            <summary>
            A scalar tag that identifies the concrete type of the node. This is provided to allow efficient type membership tests that 
            facilitate tree traversal.
            </summary>
        </member>
        <member name="P:System.Compiler.Node.UniqueKey">
            <summary>
            An integer that uniquely identifies this node. This provides an efficient equality test to facilitate hashing.
            Do not override this.
            </summary>
        </member>
        <member name="T:System.Compiler.Literal">
            <summary>
            This an Expression wrapper for compile time constants. It is assumed to be correct by construction.
            In Normalized IR, the wrapped value must be a primitive numeric type or an enum or a string or null.
            If used in custom attributes, types are also allowed as well as single dimensional arrays of other allowed types.
            If the wrapped value is null, any reference type is allowed, except in custom attributes, where it must be Type or String.
            </summary>
        </member>
        <member name="P:System.Compiler.Literal.Value">
            <summary>
            Holds the wrapped compile time constant value.
            </summary>
        </member>
        <member name="P:System.Compiler.Variable.Name">
            <summary>The name of a stack location. For example the name of a local variable or the name of a method parameter.</summary>
        </member>
        <member name="M:System.Compiler.Parameter.GetParamArrayElementType">
            <summary>
            If the parameter is a param array, this returns the element type of the array. If not, it returns null.
            </summary>
        </member>
        <member name="M:System.Compiler.Parameter.GetAttribute(System.Compiler.TypeNode)">
            <summary>
            Gets the first attribute of the given type in the attribute list of this parameter. Returns null if none found.
            This should not be called until the AST containing this member has been processed to replace symbolic references
            to members with references to the actual members.
            </summary>
        </member>
        <member name="P:System.Compiler.Parameter.Attributes">
            <summary>The (C# custom) attributes of this parameter.</summary>
        </member>
        <member name="P:System.Compiler.Parameter.DefaultValue">
            <summary>The value that should be supplied as the argument value of this optional parameter if the source code omits an explicit argument value.</summary>
        </member>
        <member name="P:System.Compiler.Parameter.ParameterListIndex">
            <summary>
            Zero based index into a parameter list containing this parameter.
            </summary>
        </member>
        <member name="P:System.Compiler.Parameter.ArgumentListIndex">
            <summary>
            Zero based index into the list of arguments on the evaluation stack. 
            Instance methods have the this object as parameter zero, which means that the first parameter will have value 1, not 0.
            </summary>
        </member>
        <member name="P:System.Compiler.Parameter.IsIn">
            <summary>
            True if the corresponding argument value is used by the callee. (This need not be the case for a parameter marked as IsOut.) 
            </summary>
        </member>
        <member name="P:System.Compiler.Parameter.IsOptional">
            <summary>
            True if the caller can omit providing an argument for this parameter.
            </summary>
        </member>
        <member name="P:System.Compiler.Parameter.IsOut">
            <summary>
            True if the corresponding argument must be a left hand expression and will be updated when the call returns.
            </summary>
        </member>
        <member name="P:System.Compiler.ThisBinding.Type">
            <summary>
            Must forward type to underlying binding, since ThisBindings get built at times when
            the bound This node does not have its final type yet.
            </summary>
        </member>
        <member name="F:System.Compiler.Base.UsedAsMarker">
            <summary>
            When the source uses the C# compatibility mode, base calls cannot be put after non-null
            field initialization, but must be put before the body. But the user can specify where
            the base ctor call should be performed by using "base;" as a marker. During parsing
            this flag is set so the right code transformations can be performed at code generation.
            </summary>
        </member>
        <member name="F:System.Compiler.Identifier.Empty">
            <summary>An identifier with the empty string ("") as its value.</summary>
        </member>
        <member name="M:System.Compiler.Identifier.For(System.Byte*,System.Int32)">
            <summary>
            Use when pointer+offset points to a null terminated string of UTF8 code points.
            </summary>
        </member>
        <member name="M:System.Compiler.Identifier.For(System.Byte*,System.UInt32)">
            <summary>
            Use when pointer points to a string of UTF8 code points of a given length
            </summary>
        </member>
        <member name="P:System.Compiler.Identifier.UniqueIdKey">
            <summary>
            Returns an integer that is the same for every Identifier instance that has the same string value, and that is different from
            every other identifier instance that has a different string value. Useful for efficient equality tests when hashing identifiers.
            </summary>
        </member>
        <member name="P:System.Compiler.Indexer.ElementType">
            <summary>
            This type is normally expected to be the same the value of Type. However, if the indexer applies to an array of enums, then
            Type will be the enum type and ElementType will be the underlying type of the enum.
            </summary>
        </member>
        <member name="T:System.Compiler.LRExpression">
            <summary>
            An expression that is used on the left hand as well as the right hand side of an assignment statement. For example, e in (e += 1).
            </summary>
        </member>
        <member name="P:System.Compiler.Instruction.OpCode">
            <summary>The actual value of the opcode</summary>
        </member>
        <member name="P:System.Compiler.Instruction.Offset">
            <summary>The offset from the start of the instruction stream of a method</summary>
        </member>
        <member name="P:System.Compiler.Instruction.Value">
            <summary>Immediate data such as a string, the address of a branch target, or a metadata reference, such as a Field</summary>
        </member>
        <member name="F:System.Compiler.AssignmentStatement.UnifiedType">
            <summary>A Type two which both operands must be coerced before carrying out the operation (if any).</summary>
        </member>
        <member name="T:System.Compiler.ReturnValue">
            <summary>
            Represents the return value in a post condition
            </summary>
        </member>
        <member name="F:System.Compiler.LocalDeclaration.AssignmentNodeType">
            <summary>
            Used when converting a declaration with initializer into an assignment statement.
            Usually Nop, but could be set to CopyReference to avoid dereferencing on either side.
            </summary>
        </member>
        <member name="T:System.Compiler.AliasDefinition">
            <summary>
            Associates an identifier with a type or a namespace or a Uri or a list of assemblies. 
            In C# alias identifiers are used as root identifiers in qualified expressions, or as identifier prefixes.
            </summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.Alias">
            <summary>The identifier that serves as an alias for the type, namespace, Uri or list of assemblies.</summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.AliasedAssemblies">
            <summary>The list of assemblies being aliased.</summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.AliasedExpression">
            <summary>The expression that was (or should be) resolved into a type, namespace or Uri.</summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.AliasedNamespace">
            <summary>The namespace being aliased.</summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.AliasedType">
            <summary>A reference to the type being aliased.</summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.AliasedUri">
            <summary>The Uri being aliased.</summary>
        </member>
        <member name="F:System.Compiler.AliasDefinition.ConflictingType">
            <summary>
            If an alias definition conflicts with a type definition and this causes an ambiguity, the conflicting type is stored here
            by the code that detects the ambiguity. A later visitor is expected to report an error if this is not null.
            </summary>
        </member>
        <member name="M:System.Compiler.AttributeNode.GetCoercedLiteralValue(System.Compiler.TypeNode,System.Object)">
            <summary>
            Gets the value of the literal coercing literals of TypeNode, EnumNode, TypeNode[], and EnumNode[] as needed.
            </summary>
            <param name="type">A TypeNode representing the type of the literal</param>
            <param name="value">The value of the literal</param>
            <returns>An object that has been coerced to the appropiate runtime type</returns>
        </member>
        <member name="M:System.Compiler.AttributeNode.GetCoercedArrayLiteral(System.Compiler.ArrayType,System.Array)">
            <summary>
            Gets the array literal in arrayValue coercing TypeNode[] and EnumNode[] as needed.
            </summary>
            <param name="arrayType">A TypeNode representing the array type</param>
            <param name="arrayValue">The value of the array literal to coerce</param>
            <returns>An Array object that has been coerced to the appropriate runtime type</returns>
        </member>
        <member name="P:System.Compiler.AttributeNode.Expressions">
            <summary>
            Invariant: positional arguments occur first and in order in the expression list. Named arguments
            follow posititional arguments in any order.
            </summary>
        </member>
        <member name="F:System.Compiler.Module.DocumentationNode">
            <summary>The source code, if any, corresponding to the value in Documentation.</summary>
        </member>
        <member name="M:System.Compiler.Module.GetAttribute(System.Compiler.TypeNode)">
            <summary>
            Gets the first attribute of the given type in the custom attribute list of this module. Returns null if none found.
            This should not be called until the module has been processed to replace symbolic references
            to members with references to the actual members.
            </summary>
        </member>
        <member name="M:System.Compiler.Module.GetStructurallyEquivalentType(System.Compiler.Identifier,System.Compiler.Identifier)">
            <summary>
            The identifier represents the structure via some mangling scheme. The result can be either from this module,
            or any module this module has a reference to.
            </summary>
        </member>
        <member name="P:System.Compiler.Module.ContainingAssembly">
            <summary>The assembly, if any, that includes this module in its ModuleReferences.</summary>
        </member>
        <member name="P:System.Compiler.Module.Kind">
            <summary>An enumeration that indicates if the module is an executable, library or resource, and so on.</summary>
        </member>
        <member name="P:System.Compiler.Module.Location">
            <summary>The path of the file from which this module or assembly was loaded or will be stored in.</summary>
        </member>
        <member name="P:System.Compiler.Module.TargetRuntimeVersion">
            <summary>Identifies the version of the CLR that is required to load this module or assembly.</summary>
        </member>
        <member name="P:System.Compiler.Module.Name">
            <summary>The name of the module or assembly. Includes the file extension if the module is not an assembly.</summary>
        </member>
        <member name="P:System.Compiler.Module.MetadataImportErrors">
            <summary>
            If any exceptions were encountered while reading in this module, they are recorded here. Since reading is lazy,
            this list can grow dynamically during the use of a module.
            </summary>
        </member>
        <member name="P:System.Compiler.Module.Attributes">
            <summary>
            The attributes associated with this module or assembly. This corresponds to C# custom attributes with the assembly or module target specifier.
            </summary>
        </member>
        <member name="P:System.Compiler.Module.SecurityAttributes">
            <summary>
            Declarative security for the module or assembly.
            </summary>
        </member>
        <member name="P:System.Compiler.Module.Documentation">
            <summary>An XML Document Object Model for a document containing all of the documentation comments applicable to members
            defined in this module.</summary>
        </member>
        <member name="P:System.Compiler.Module.EntryPoint">
            <summary>If this module is an executable, this method is the one that gets called to start the execution of managed code.</summary>
        </member>
        <member name="P:System.Compiler.Module.ModuleReferences">
            <summary>The list of modules (excluding assemblies) defining members that are referred to in this module or assembly.</summary>
        </member>
        <member name="P:System.Compiler.Module.Resources">
            <summary>
            A list of managed resources linked or embedded into this module or assembly.
            </summary>
        </member>
        <member name="P:System.Compiler.Module.Win32Resources">
            <summary>
            A list of Win32 resources embedded in this module or assembly.
            </summary>
        </member>
        <member name="P:System.Compiler.Module.Types">
            <summary>The types contained in this module or assembly.</summary>
        </member>
        <member name="M:System.Compiler.AssemblyNode.GetModuleAttribute(System.Compiler.TypeNode)">
            <summary>
            Gets the first attribute of the given type in the custom attribute list of this member. Returns null if none found.
            The member is assumed to be either imported, or already in a form suitable for export.
            </summary>
        </member>
        <member name="M:System.Compiler.AssemblyNode.GetAssembly(System.String,System.Collections.IDictionary,System.Boolean,System.Boolean,System.Boolean,System.Compiler.AssemblyNode.PostAssemblyLoadProcessor)">
            <summary>
            Calls the post load event only if the assembly is not already loaded/found in the cache.
            </summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.ContractAssembly">
            <summary>A separate assembly that supplied the type and method contracts for this assembly.</summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.StrongName">
            <summary>
            A string containing the name, version, culture and key of this assembly, formatted as required by the CLR loader.
            </summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.Culture">
            <summary>The target culture of any localized resources in this assembly.</summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.Flags">
            <summary>An enumeration that identifies the what kind of assembly this is.</summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.ModuleName">
            <summary>Attributes that specifically target a module rather an assembly.</summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.PublicKeyOrToken">
            <summary>The public part of the key pair used to sign this assembly, or a hash of the public key.</summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.Version">
            <summary>The version of this assembly.</summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.ExportedTypes">
            <summary>
            Public types defined in other modules making up this assembly and to which other assemblies may refer to.
            </summary>
        </member>
        <member name="P:System.Compiler.AssemblyNode.ModuleAttributes">
            <summary>
            The attributes associated with this module. This corresponds to C# custom attributes with the module target specifier.
            </summary>
        </member>
        <member name="T:System.Compiler.Member">
            <summary>
            A member of a Namespace or a TypeNode
            </summary>
        </member>
        <member name="F:System.Compiler.Member.DeclaringNamespace">
            <summary>The namespace of which this node is a member. Null if this node is a member of type.</summary>
        </member>
        <member name="F:System.Compiler.Member.IsUnsafe">
            <summary>
            Indicates that the signature of this member may include unsafe types such as pointers. For methods and properties, it also indicates that the
            code may contain unsafe constructions such as pointer arithmetic.
            </summary>
        </member>
        <member name="F:System.Compiler.Member.References">
            <summary>A list of other nodes that refer to this member. Must be filled in by client code.</summary>
        </member>
        <member name="M:System.Compiler.Member.GetAttribute(System.Compiler.TypeNode)">
            <summary>
            Gets the first attribute of the given type in the attribute list of this member. Returns null if none found.
            This should not be called until the AST containing this member has been processed to replace symbolic references
            to members with references to the actual members.
            </summary>
        </member>
        <member name="F:System.Compiler.Member.DocumentationNode">
            <summary>The source code, if any, corresponding to the value in Documentation.</summary>
        </member>
        <member name="M:System.Compiler.Member.WriteDocumentation(System.Xml.XmlTextWriter)">
            <summary>
            Writes out an element with tag "element", name attribute DocumentationId.ToString() and body Documentation using the provided XmlTextWriter instance.
            </summary>
        </member>
        <member name="P:System.Compiler.Member.DeclaringType">
            <summary>The type of which this node is a member. Null if this node is a member of a Namespace.</summary>
        </member>
        <member name="P:System.Compiler.Member.Name">
            <summary>The unqualified name of the member.</summary>
        </member>
        <member name="P:System.Compiler.Member.Attributes">
            <summary>
            The attributes of this member. Corresponds to custom attribute annotations in C#.
            </summary>
        </member>
        <member name="P:System.Compiler.Member.HidesBaseClassMember">
            <summary>Indicates if this is a member of a subclass that intentionally has the same signature as a member of a base class. Corresponds to the "new" modifier in C#.</summary>
        </member>
        <member name="P:System.Compiler.Member.OverridesBaseClassMember">
            <summary>Indicates if this is a virtual method of a subclass that intentionally overrides a method of a base class. Corresponds to the "override" modifier in C#.</summary>
        </member>
        <member name="P:System.Compiler.Member.FullName">
            <summary>
            The concatenation of the FullName of the containing member and the name of this member. 
            Separated with a '.' character if the containing member is a namespace and a '+' character if the containing member is a Type.
            Includes the parameter type full names when this member is a method or a property. Also includes (generic) template arguments.
            </summary>
        </member>
        <member name="P:System.Compiler.Member.IsAssembly">
            <summary>True if all references to this member must be from the assembly containing the definition of this member. </summary>
        </member>
        <member name="P:System.Compiler.Member.IsCompilerControlled">
            <summary>
            True if access to this member is controlled by the compiler and not the runtime. Cannot be accessed from other assemblies since these
            are not necessarily controlled by the same compiler.
            </summary>
        </member>
        <member name="P:System.Compiler.Member.IsFamily">
            <summary>True if this member can only be accessed from subclasses of the class declaring this member.</summary>
        </member>
        <member name="P:System.Compiler.Member.IsFamilyAndAssembly">
            <summary>True if this member can only be accessed from subclasses of the class declaring this member, provided that these subclasses are also
            contained in the assembly containing this member.</summary>
        </member>
        <member name="P:System.Compiler.Member.IsFamilyOrAssembly">
            <summary>True if all references to this member must either be from the assembly containing the definition of this member,
            or from a subclass of the class declaring this member.</summary>
        </member>
        <member name="P:System.Compiler.Member.IsPrivate">
            <summary>True if all references to this member must be from members of the type declaring this member./// </summary>
        </member>
        <member name="P:System.Compiler.Member.IsPublic">
            <summary>True if the member can be accessed from anywhere./// </summary>
        </member>
        <member name="P:System.Compiler.Member.IsSpecialName">
            <summary>True if the name of this member conforms to a naming pattern with special meaning. For example the name of a property getter.</summary>
        </member>
        <member name="P:System.Compiler.Member.IsStatic">
            <summary>True if this member always has the same value or behavior for all instances the declaring type.</summary>
        </member>
        <member name="P:System.Compiler.Member.IsVisibleOutsideAssembly">
            <summary>True if another assembly can contain a reference to this member.</summary>
        </member>
        <member name="P:System.Compiler.Member.ObsoleteAttribute">
            <summary>A cached reference to the first Obsolete attribute of this member. Null if no such attribute exsits.</summary>
        </member>
        <member name="P:System.Compiler.Member.Documentation">
            <summary>The body of an XML element containing a description of this member. Used to associated documentation (such as this comment) with members.
            The fragment usually conforms to the structure defined in the C# standard.</summary>
        </member>
        <member name="P:System.Compiler.Member.DocumentationId">
            <summary>
            The value of the name attribute of the XML element whose body is the XML fragment returned by Documentation.
            </summary>
        </member>
        <member name="P:System.Compiler.Member.HelpText">
            <summary>
            The value of the summary child element of the XML fragment returned by Documentation. All markup is stripped from the value.
            </summary>
        </member>
        <member name="T:System.Compiler.TypeNode">
            <summary>
            The common base class for all types. This type should not be extended directly.
            Instead extend one of the standard subclasses such as Class, Struct or Interface, since in
            the CLR a type has to be an instance of one the subclasses, and a type which does not extend
            one of these types will have no equivalent in the CLR.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.IsDefinedBy">
            <summary>If this type is the combined result of a number of partial type definitions, this lists the partial definitions.</summary>
        </member>
        <member name="F:System.Compiler.TypeNode.IsNotFullySpecialized">
            <summary>
            True if this type is the result of a template instantiation with arguments that are themselves template parameters. 
            Used to model template instantiations occurring inside templates.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.PartiallyDefines">
            <summary>
            If this type is a partial definition, the value of this is the combined type resulting from all the partial definitions.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.extensions">
            <summary>
            The list of extensions of this type, if it's a non-extension type.
            all extensions implement the IExtendTypeNode interface (in the Sing# code base).
            null = empty list
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.extensionsExamined">
            <summary>
            Whether or not the list of extensions has been examined;
            it's a bug to record a new extension after extensions have been examined.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.RecordExtension(System.Compiler.TypeNode)">
            <summary>
            Record another extension of this type.
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:System.Compiler.TypeNode.DuplicateExtensions(System.Compiler.TypeNode,System.Compiler.TypeNodeList)">
            <summary>
            Copy a (possibly transformed) set of extensions from source to the
            receiver, including whether or not the extensions have been examined.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.op_Equality(System.Compiler.TypeNode,System.Compiler.TypeNode)">
            <summary>
            Return whether t1 represents the same type as t2 (or both are null).
            This copes with the cases where t1 and/or t2 may be type views and/or type extensions, as
            in Extensible Sing#.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.ProvideTypeMembers">
            <summary>
            A delegate that is called the first time Members is accessed, if non-null.
            Provides for incremental construction of the type node.
            Must not leave Members null.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.ProvideNestedTypes">
            <summary>
            A delegate that is called the first time NestedTypes is accessed, if non-null.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.ProvideTypeAttributes">
            <summary>
            A delegate that is called the first time Attributes is accessed, if non-null.
            Provides for incremental construction of the type node.
            Must not leave Attributes null.
            </summary>
        </member>
        <member name="F:System.Compiler.TypeNode.ProviderHandle">
            <summary>
            Opaque information passed as a parameter to the delegates in ProvideTypeMembers et al.
            Typically used to associate this namespace instance with a helper object.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetAbstractMethods(System.Compiler.MethodList)">
            <summary>
            Returns the methods of an abstract type that have been left unimplemented. Includes methods inherited from
            base classes and interfaces, and methods from any (known) extensions.
            </summary>
            <param name="result">A method list to which the abstract methods must be appended.</param>
        </member>
        <member name="M:System.Compiler.TypeNode.GetArrayType(System.Int32)">
            <summary>
            Returns a type representing an array whose elements are of this type. Will always return the same instance for the same rank.
            </summary>
            <param name="rank">The number of dimensions of the array.</param>
        </member>
        <member name="M:System.Compiler.TypeNode.GetArrayType(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Returns a type representing an array whose elements are of this type. Will always return the same instance for the same rank, sizes and bounds.
            </summary>
            <param name="rank">The number of dimensions of the array.</param>
            <param name="sizes">The size of each dimension.</param>
            <param name="loBounds">The lower bound for indices. Defaults to zero.</param>
        </member>
        <member name="M:System.Compiler.TypeNode.GetConstructor(System.Compiler.TypeNode[])">
            <summary>
            Returns the constructor with the specified parameter types. Returns null if this type has no such constructor.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetTemplateInstance(System.Compiler.TypeNode,System.Compiler.TypeNode[])">
            <summary>
            Gets an instance for the given template arguments of this (generic) template type.
            </summary>
            <param name="referringType">The type in which the reference to the template instance occurs. If the template is not
            generic, the instance becomes a nested type of the referring type so that it has the same access privileges as the
            code referrring to the instance.</param>
            <param name="templateArguments">The template arguments.</param>
            <returns>An instance of the template. Always the same instance for the same arguments.</returns>
        </member>
        <member name="M:System.Compiler.TypeNode.GetTemplateInstance(System.Compiler.TypeNode,System.Compiler.TypeNodeList)">
            <summary>
            Gets an instance for the given template arguments of this (generic) template type.
            </summary>
            <param name="referringType">The type in which the reference to the template instance occurs. If the template is not
            generic, the instance becomes a nested type of the referring type so that it has the same access privileges as the
            code referrring to the instance.</param>
            <param name="templateArguments">The template arguments.</param>
            <returns>An instance of the template. Always the same instance for the same arguments.</returns>
        </member>
        <member name="M:System.Compiler.TypeNode.GetMembersNamed(System.Compiler.Identifier)">
            <summary>
            Returns a list of all the members declared directly by this type with the specified name.
            Returns an empty list if this type has no such members.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetEvent(System.Compiler.Identifier)">
            <summary>
            Returns the first event declared by this type with the specified name.
            Returns null if this type has no such event.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetField(System.Compiler.Identifier)">
            <summary>
            Returns the first field declared by this type with the specified name. Returns null if this type has no such field.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetMethod(System.Compiler.Identifier,System.Compiler.TypeNode[])">
            <summary>
            Returns the first method declared by this type with the specified name and parameter types. Returns null if this type has no such method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Compiler.TypeNode.GetNestedType(System.Compiler.Identifier)">
            <summary>
            Returns the first nested type declared by this type with the specified name. Returns null if this type has no such nested type.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetProperty(System.Compiler.Identifier,System.Compiler.TypeNode[])">
            <summary>
            Returns the first property declared by this type with the specified name and parameter types. Returns null if this type has no such property.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.GetTypeNode(System.Type)">
            <summary>
            Gets a TypeNode instance corresponding to the given System.Type instance.
            </summary>
            <param name="type">A runtime type.</param>
            <returns>A TypeNode instance.</returns>
        </member>
        <member name="M:System.Compiler.TypeNode.GetRuntimeType">
            <summary>
            Gets a System.Type instance corresponding to this type. The assembly containin this type must be normalized
            and must have a location on disk or must have been loaded via AssemblyNode.GetRuntimeAssembly.
            </summary>
            <returns>A System.Type instance. (A runtime type.)</returns>
        </member>
        <member name="M:System.Compiler.TypeNode.IsAssignableTo(System.Compiler.TypeNode)">
            <summary>
            Returns true if the CLR CTS allows a value of this type may be assigned to a variable of the target type (possibly after boxing),
            either because the target type is the same or a base type, or because the target type is an interface implemented by this type or the implementor of this type,
            or because this type and the target type are zero based single dimensional arrays with assignment compatible reference element types
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.IsAssignableToInstanceOf(System.Compiler.TypeNode)">
            <summary>
            Returns true if this type is assignable to some instance of the given template.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.IsAssignableToInstanceOf(System.Compiler.TypeNode,System.Compiler.TypeNodeList@)">
            <summary>
            Returns true if this type is assignable to some instance of the given template.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.IsDerivedFrom(System.Compiler.TypeNode)">
            <summary>
            Returns true if otherType is the base class of this type or if the base class of this type is derived from otherType.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.DeepStripModifiers(System.Compiler.TypeNode,System.Compiler.TypeNode,System.Compiler.TypeNode[])">
            <summary>
            Strip the given modifier from the type, modulo substructures that are instantiated with respect
            to the given template type. In other words, travers type and templateType in parallel, stripping common
            non-null modifiers, but stop when reaching a type variable in the template type.
            <param name="type">Type to be stripped</param>
            <param name="modifiers">Modifiers to strip off</param>
            <param name="templateType">Template bounding the stripping of type. Passing null for the templateType performs a full DeepStrip</param>
            </summary>
        </member>
        <member name="M:System.Compiler.TypeNode.ClearMemberTable">
            <summary>
            Needed whenever we change the id of an existing member
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.ClassSize">
            <summary>Specifies the total size in bytes of instances of types with prescribed layout.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.DeclaringModule">
            <summary>The module or assembly to which the compiled type belongs.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.Interfaces">
            <summary>The interfaces implemented by this class or struct, or the extended by this interface.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.Namespace">
            <summary>The namespace to which this type belongs. Null if the type is nested inside another type.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.PackingSize">
            <summary>Specifies the alignment of fields within types with prescribed layout.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.Extensions">
            <summary>
            The property that should be accessed by clients to get the list of extensions of this type.
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.ExtensionsNoTouch">
            <summary>
            When duplicating a type node, we want to transfer the extensions and the extensionsExamined flag without 
            treating this as a "touch" that sets the examined flag.  Pretty ugly, though.
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.EffectiveTypeNode">
            <summary>
            If the receiver is a type extension, return the extendee, otherwise return the receiver.
            [The identity function, except for dialects (e.g. Extensible Sing#) that allow
            extensions and differing views of types]
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.TemplateInstances">
            <summary>Contains all the types instantiated from this non generic template type.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.SecurityAttributes">
            <summary>Contains declarative security information associated with the type.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.BaseType">
            <summary>The type from which this type is derived. Null in the case of interfaces and System.Object.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.DefaultMembers">
            <summary>A list of any members of this type that have the DefaultMember attribute.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.ConstructorName">
            <summary>
            Return the name the constructor should have in this type node.  By default, it's
            the same as the name of the enclosing type node, but it can be different in e.g. 
            extensions in Extensible Sing#
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsAbstract">
            <summary>True if the type is an abstract class or an interface.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsGeneric">
            <summary>True if this type is a template conforming to the rules of a generic type in the CLR.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsNormalized">
            <summary>
            True if the type node is in "normal" form. A node is in "normal" form if it is effectively a node in an AST formed directly
            from CLR module or assembly. Such a node can be written out as compiled code to an assembly or module without further processing.
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsPrimitiveComparable">
            <summary>True if values of this type can be compared directly in CLR IL instructions.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsPrimitiveInteger">
            <summary>True if values of this type are integers that can be processed by CLR IL instructions.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsPrimitiveNumeric">
            <summary>True if values of this type are integers or floating point numbers that can be processed by CLR IL instructions.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsPrimitiveUnsignedInteger">
            <summary>True if values of this type are unsigned integers that can be processed by CLR IL instructions.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsPrimitive">
            <summary>True if values of this type can be processed by CLR IL instructions.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsSealed">
            <summary>True if the type cannot be derived from.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsStructural">
            <summary>True if the identity of the type depends on its structure rather than its name. 
            Arrays, pointers and generic type instances are examples of such types.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsTemplateParameter">
            <summary>True if the type serves as a parameter to a type template.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsUnmanaged">
            <summary>True if the type is a value type containing only fields of unmanaged types.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.StructuralElementTypes">
            <summary>A list of the types that contribute to the structure of a structural type.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsUnsignedPrimitiveNumeric">
            <summary>True if values of this type are unsigned integers that can be processed by CLR IL instructions.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsValueType">
            <summary>True if instances of this type have no identity other than their value and are copied upon assignment.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.IsPointerType">
            <summary>
            True if underlying type (modulo type modifiers) is a pointer type (Pointer)
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.Members">
            <summary>
            The list of members contained inside this type, by default ignoring any extensions of this type.
            (Subclasses in the Extensible Sing# dialect override this to include members of visible extensions.)
            If the value of members is null and the value of ProvideTypeMembers is not null, the 
            TypeMemberProvider delegate is called to fill in the value of this property.
            </summary>
        </member>
        <member name="P:System.Compiler.TypeNode.Template">
            <summary>The (generic) type template from which this type was instantiated. Null if this is not a (generic) type template instance.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.TemplateArguments">
            <summary>The arguments used when this (generic) type template instance was instantiated.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.TemplateParameters">
            <summary>The type parameters of this type. Null if this type is not a (generic) type template.</summary>
        </member>
        <member name="P:System.Compiler.TypeNode.TypeCode">
            <summary>The System.TypeCode value that Convert.GetTypeCode will return pass an instance of this type as parameter.</summary>
        </member>
        <member name="T:System.Compiler.TypeNode.TypeMemberProvider">
            <summary>
            The type of delegates that fill in the Members property of the given type.
            </summary>
        </member>
        <member name="T:System.Compiler.TypeNode.NestedTypeProvider">
            <summary>
            The type of delegates that fill in the NestedTypes property of the given type.
            </summary>
        </member>
        <member name="T:System.Compiler.TypeNode.TypeAttributeProvider">
            <summary>
            The type of delegates that fill in the Attributes property of the given type.
            </summary>
        </member>
        <member name="P:System.Compiler.Class.BaseClass">
            <summary>
            The class from which this class has been derived. Null if this class is System.Object.
            </summary>
        </member>
        <member name="T:System.Compiler.Scope">
            <summary>
            Does not model a real type, but leverages the symbol table methods of Class. In other words, this is implementation inheritance, not an ISA relationship.
            </summary>
        </member>
        <member name="M:System.Compiler.NamespaceScope.GetType(System.Compiler.Identifier,System.Compiler.Identifier,System.Compiler.TypeNodeList@)">
            <summary>
            Search this namespace for a type with this name nested in the given namespace. Also considers used name spaces.
            If more than one type is found, a list is returned in duplicates.
            </summary>
        </member>
        <member name="M:System.Compiler.NamespaceScope.GetType(System.Compiler.Identifier,System.Compiler.TypeNodeList@)">
            <summary>
            Searches this namespace for a type with this name. Also considers aliases and used name spaces, including those of outer namespaces.
            If more than one type is found, a list is returned in duplicates. Types defined in the associated
            module mask types defined in referenced modules and assemblies. Results are cached and duplicates are returned only when
            there is a cache miss.
            </summary>
        </member>
        <member name="M:System.Compiler.NamespaceScope.GetReferencedTypes(System.Compiler.Identifier,System.Compiler.Identifier,System.Compiler.TypeNodeList)">
            <summary>
            Searches the module and assembly references of the associated module to find types
            </summary>
        </member>
        <member name="P:System.Compiler.EnumNode.UnderlyingType">
            <summary>
            The underlying integer type used to store values of this enumeration.
            </summary>
        </member>
        <member name="P:System.Compiler.Struct.IsUnmanaged">
            <summary>True if the type is a value type containing only fields of unmanaged types.</summary>
        </member>
        <member name="P:System.Compiler.ITypeParameter.ParameterListIndex">
            <summary>
            Zero based index into a parameter list containing this parameter.
            </summary>
        </member>
        <member name="P:System.Compiler.TypeParameter.ParameterListIndex">
            <summary>
            Zero based index into a parameter list containing this parameter.
            </summary>
        </member>
        <member name="P:System.Compiler.TypeParameter.IsTemplateParameter">
            <summary>True if the type serves as a parameter to a type template.</summary>
        </member>
        <member name="P:System.Compiler.ClassParameter.ParameterListIndex">
            <summary>
            Zero based index into a parameter list containing this parameter.
            </summary>
        </member>
        <member name="P:System.Compiler.ClassParameter.IsTemplateParameter">
            <summary>True if the type serves as a parameter to a type template.</summary>
        </member>
        <member name="P:System.Compiler.ArrayType.Interfaces">
            <summary>The interfaces implemented by this class or struct, or the extended by this interface.</summary>
        </member>
        <member name="P:System.Compiler.OptionalModifierTypeExpression.IsUnmanaged">
            <summary>
            Only needed because IsUnmanaged test is performed in the Looker rather than checker. Once the test
            is moved, this code can be removed.
            </summary>
        </member>
        <member name="P:System.Compiler.RequiredModifierTypeExpression.IsUnmanaged">
            <summary>
            Can be removed once the Unmanaged check moves from Looker to Checker.
            </summary>
        </member>
        <member name="P:System.Compiler.PointerTypeExpression.IsUnmanaged">
            <summary>
            This is only needed because the Unmanaged test is done in the Looker rather than the checker.
            (Once the check moves, this can be removed).
            </summary>
        </member>
        <member name="F:System.Compiler.Event.ImplementedTypes">
            <summary>The list of types (just one in C#) that contain abstract or virtual events that are explicity implemented or overridden by this event.</summary>
        </member>
        <member name="F:System.Compiler.Event.InitialHandler">
            <summary>Provides a delegate instance that is added to the event upon initialization.</summary>
        </member>
        <member name="P:System.Compiler.Event.Flags">
            <summary>Bits characterizing this event.</summary>
        </member>
        <member name="P:System.Compiler.Event.HandlerAdder">
            <summary>The method to be called in order to add a handler to an event. Corresponds to the add clause of a C# event declaration.</summary>
        </member>
        <member name="P:System.Compiler.Event.HandlerCaller">
            <summary>The method that gets called to fire an event. There is no corresponding C# syntax.</summary>
        </member>
        <member name="P:System.Compiler.Event.HandlerRemover">
            <summary>The method to be called in order to remove a handler from an event. Corresponds to the remove clause of a C# event declaration.</summary>
        </member>
        <member name="P:System.Compiler.Event.HandlerType">
            <summary>The delegate type that a handler for this event must have. Corresponds to the type clause of C# event declaration.</summary>
        </member>
        <member name="P:System.Compiler.Event.IsAbstract">
            <summary>
            True if the methods constituting this event are abstract.
            </summary>
        </member>
        <member name="P:System.Compiler.Event.IsVirtual">
            <summary>
            True if that the methods constituting this event are virtual.
            </summary>
        </member>
        <member name="F:System.Compiler.Method.Scope">
            <summary>Provides a way to retrieve the parameters and local variables defined in this method given their names.</summary>
        </member>
        <member name="F:System.Compiler.Method.ProvideMethodAttributes">
            <summary>
            A delegate that is called the first time Attributes is accessed, if non-null.
            Provides for incremental construction of the type node.
            Must not leave Attributes null.
            </summary>
        </member>
        <member name="M:System.Compiler.Method.GetLocalForField(System.Compiler.Field)">
            <summary>
            Returns the local associated with the given field, allocating a new local if necessary.
            </summary>
        </member>
        <member name="P:System.Compiler.Method.SecurityAttributes">
            <summary>Contains declarative security information associated with the type.</summary>
        </member>
        <member name="P:System.Compiler.Method.ImplicitlyImplementedInterfaceMethods">
            <summary>
            Computes the implicitly implemented methods for any method, not necessarily being compiled.
            </summary>
        </member>
        <member name="P:System.Compiler.Method.InitLocals">
            <summary>True if all local variables are to be initialized to default values before executing the method body.</summary>
        </member>
        <member name="P:System.Compiler.Method.IsGeneric">
            <summary>True if this method is a template that conforms to the rules for a CLR generic method.</summary>
        </member>
        <member name="P:System.Compiler.Method.Parameters">
            <summary>The parameters this method has to be called with.</summary>
        </member>
        <member name="P:System.Compiler.Method.ReturnAttributes">
            <summary>Attributes that apply to the return value of this method.</summary>
        </member>
        <member name="P:System.Compiler.Method.ReturnType">
            <summary>The type of value that this method may return.</summary>
        </member>
        <member name="P:System.Compiler.Method.DeclaringMember">
            <summary>Provides the declaring event or property of an accessor.</summary>
        </member>
        <member name="P:System.Compiler.Method.Body">
            <summary>The instructions constituting the body of this method, in the form of a tree.</summary>
        </member>
        <member name="P:System.Compiler.Method.Instructions">
            <summary>The instructions constituting the body of this method, in the form of a linear list of Instruction nodes.</summary>
        </member>
        <member name="P:System.Compiler.Method.IsVirtual">
            <summary>
            True if this method can in principle be overridden by a method in a derived class.
            </summary>
        </member>
        <member name="P:System.Compiler.Method.Template">
            <summary>The (generic) method template from which this method was instantiated. Null if this is not a (generic) method template instance.</summary>
        </member>
        <member name="P:System.Compiler.Method.TemplateArguments">
            <summary>
            The arguments used when this (generic) method template instance was instantiated.
            </summary>
        </member>
        <member name="T:System.Compiler.Method.MethodAttributeProvider">
            <summary>
            The type of delegates that fill in the Attributes property of the given method.
            </summary>
        </member>
        <member name="F:System.Compiler.InstanceInitializer.IsDeferringConstructor">
            <summary>
            True if this constructor calls a constructor declared in the same class, as opposed to the base class.
            </summary>
        </member>
        <member name="F:System.Compiler.InstanceInitializer.ContainsBaseMarkerBecauseOfNonNullFields">
            <summary>
            When the source uses the C# compatibility mode, base calls cannot be put after non-null
            field initialization, but must be put before the body. But the user can specify where
            the base ctor call should be performed by using "base;" as a marker. During parsing
            this flag is set so the right code transformations can be performed at code generation.
            </summary>
        </member>
        <member name="F:System.Compiler.Field.Initializer">
            <summary>Provides a value that is assigned to the field upon initialization.</summary>
        </member>
        <member name="P:System.Compiler.Field.DefaultValue">
            <summary>The compile-time value to be substituted for references to this field if it is a literal.</summary>
        </member>
        <member name="P:System.Compiler.Field.IsVolatile">
            <summary>True if the field may not be cached. Used for sharing data between multiple threads.</summary>
        </member>
        <member name="P:System.Compiler.Field.Type">
            <summary>The type of values that may be stored in the field.</summary>
        </member>
        <member name="P:System.Compiler.Field.IsLiteral">
            <summary>True if all references to the field are replaced with a value that is determined at compile-time.</summary>
        </member>
        <member name="P:System.Compiler.Field.IsInitOnly">
            <summary>True if the field may only be assigned to inside the constructor.</summary>
        </member>
        <member name="F:System.Compiler.Property.ImplementedTypes">
            <summary>
            The list of types (just one in C#) that contain abstract or virtual properties that are explicity implemented or overridden by this property.
            </summary>
        </member>
        <member name="P:System.Compiler.Property.Getter">
            <summary>The method that is called to get the value of this property. Corresponds to the get clause in C#.</summary>
        </member>
        <member name="P:System.Compiler.Property.Setter">
            <summary>The method that is called to set the value of this property. Corresponds to the set clause in C#.</summary>
        </member>
        <member name="P:System.Compiler.Property.OtherMethods">
            <summary>Other methods associated with the property. No equivalent in C#.</summary>
        </member>
        <member name="P:System.Compiler.Property.IsVirtual">
            <summary>
            True if this property can in principle be overridden by a property in a derived class.
            </summary>
        </member>
        <member name="P:System.Compiler.Property.Parameters">
            <summary>
            The parameters of this property if it is an indexer.
            </summary>
        </member>
        <member name="P:System.Compiler.Property.Type">
            <summary>
            The type of value that this property holds.
            </summary>
        </member>
        <member name="T:System.Compiler.Namespace">
            <summary>
            A named container of types and nested namespaces. 
            The name of the container implicitly qualifies the names of the contained types and namespaces.
            </summary>
        </member>
        <member name="F:System.Compiler.Namespace.FullNameId">
            <summary>The FullName of the namespace in the form of an Identifier rather than in the form of a string.</summary>
        </member>
        <member name="F:System.Compiler.Namespace.AliasDefinitions">
            <summary>
            Provides alternative names for types and nested namespaces. Useful for introducing shorter names or for resolving name clashes.
            The names should be added to the scope associated with this namespace.
            </summary>
        </member>
        <member name="F:System.Compiler.Namespace.NestedNamespaces">
            <summary>
            The list of namespaces that are fully contained inside this namespace.
            </summary>
        </member>
        <member name="F:System.Compiler.Namespace.URI">
            <summary>
            The Universal Resource Identifier that should be associated with all declarations inside this namespace.
            Typically used when the types inside the namespace are serialized as an XML Schema Definition. (XSD)
            </summary>
        </member>
        <member name="F:System.Compiler.Namespace.UsedNamespaces">
            <summary>
            The list of the namespaces of types that should be imported into the scope associated with this namespace.
            </summary>
        </member>
        <member name="F:System.Compiler.Namespace.ProvideTypes">
            <summary>
            A delegate that is called the first time Types is accessed. Provides for incremental construction of the namespace node.
            </summary>
        </member>
        <member name="F:System.Compiler.Namespace.ProviderHandle">
            <summary>
            Opaque information passed as a parameter to the delegate in ProvideTypes. Typically used to associate this namespace
            instance with a helper object.
            </summary>
        </member>
        <member name="P:System.Compiler.Namespace.Types">
            <summary>
            The list of types contained inside this namespace. If the value of Types is null and the value of ProvideTypes is not null, the 
            TypeProvider delegate is called to fill in the value of this property.
            </summary>
        </member>
        <member name="T:System.Compiler.Namespace.TypeProvider">
            <summary>
            A method that fills in the Types property of the given namespace. Must not leave Types null.
            </summary>
        </member>
        <member name="T:System.Compiler.Compilation">
            <summary>
            The root node of an Abstract Syntax Tree. Typically corresponds to multiple source files compiled to form a single target.
            </summary>
        </member>
        <member name="F:System.Compiler.Compilation.CompilerParameters">
            <summary>
            The compilation parameters that are used for this compilation.
            </summary>
        </member>
        <member name="F:System.Compiler.Compilation.TargetModule">
            <summary>
            The target code object that is produced as a result of this compilation.
            </summary>
        </member>
        <member name="F:System.Compiler.Compilation.CompilationUnits">
            <summary>
            A list of all the compilation units (typically source files) that make up this compilation.
            </summary>
        </member>
        <member name="F:System.Compiler.Compilation.GlobalScope">
            <summary>
            A scope for symbols that belong to the compilation as a whole. No C# equivalent. Null if not applicable.
            </summary>
        </member>
        <member name="F:System.Compiler.Compilation.ReferencedCompilations">
            <summary>
            A list of compilations that produce assemblies and modules that are referenced by this compilation and hence need to be
            compiled before this Compilation is compiled. This list is not intended to include already compiled framework assemblies
            such as system.dll.
            </summary>
        </member>
        <member name="T:System.Compiler.CompilationUnit">
            <summary>
            The root node of an Abstract Syntax Tree. Corresponds to the starting production of the syntax. Equivalent to C# compilation-unit.
            Typically a compilation unit corresponds to a single source file.
            </summary>
        </member>
        <member name="F:System.Compiler.CompilationUnit.Name">
            <summary>
            An identifier that can be used to retrieve the source text of the compilation unit.
            </summary>
        </member>
        <member name="F:System.Compiler.CompilationUnit.Nodes">
            <summary>
            An anonymous (name is Identifier.Empty) namespace holding types and nested namespaces.
            </summary>
        </member>
        <member name="F:System.Compiler.CompilationUnit.PreprocessorDefinedSymbols">
            <summary>
            The preprocessor symbols that are to treated as defined when compiling this CompilationUnit into the TargetModule.
            </summary>
        </member>
        <member name="F:System.Compiler.CompilationUnit.PragmaWarnInformation">
            <summary>
            Pragma warning information.
            </summary>
        </member>
        <member name="F:System.Compiler.CompilationUnit.Compilation">
            <summary>
            The compilation of which this unit forms a part.
            </summary>
        </member>
        <member name="T:System.Compiler.TypeViewer">
            <summary>
            An object that knows how to produce a particular scope's view of a type.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeViewer.GetTypeView(System.Compiler.TypeViewer,System.Compiler.TypeNode)">
            <summary>
            Return a scope's view of the argument type, where the scope's view is represented
            by a type viewer.
            [The identity function, except for dialects (e.g. Extensible Sing#) that allow
            extensions and differing views of types].
            Defined as a static method to allow the type viewer to be null,
            meaning an identity-function view.
            </summary>
        </member>
        <member name="M:System.Compiler.TypeViewer.GetTypeView(System.Compiler.TypeNode)">
            <summary>
            Return the typeViewer's view of the argument type.  Overridden by subclasses
            that support non-identity-function type viewers, e.g. Extensible Sing#.
            </summary>
        </member>
        <member name="T:System.Compiler.Metadata.SynchronizedWeakDictionary">
            <summary>
            A thin wrapper for a synchronized System.Collections.Hashtable that inserts and strips WeakReference wrappers for the values stored in the table.
            </summary>
        </member>
        <member name="T:System.Compiler.Specializer">
            <summary>
            This class specializes a normalized IR by replacing type parameters with type arguments.
            </summary>
        </member>
        <member name="T:System.Compiler.IParser">
            <summary>
            Provides methods for invoking a parser to obtain AST nodes corresponding to various types of code snippets.
            </summary>
        </member>
        <member name="M:System.Compiler.IParser.ParseCompilationUnit(System.Compiler.CompilationUnit)">
            <summary>
            Parses the parser's source document as an entire compilation unit and adds the resulting AST nodes to the
            Nodes list of the given CompilationUnit instance.
            </summary>
            <param name="compilationUnit">The compilation unit whose Nodes list will receive the AST root node(s) that the parser produces.</param>
        </member>
        <member name="T:System.Compiler.IParserFactory">
            <summary>Provides a way for general purpose code to construct parsers using an standard interface. 
            Useful for base classes without complete knowledge of all the different kinds of parsers that might be used in an application.</summary>
        </member>
        <member name="F:System.Compiler.SystemAssemblyLocation.SystemAssemblyCache">
            <summary>
            Allows compilers to share an assembly cache for loading runtime and system dlls.
            </summary>
        </member>
        <member name="M:System.Compiler.TargetPlatform.SetToPostV1_1(System.String)">
            <summary>
            Use this to set the target platform to a platform with a superset of the platform assemblies in version 1.1, but
            where the public key tokens and versions numbers are determined by reading in the actual assemblies from
            the supplied location. Only assemblies recognized as platform assemblies in version 1.1 will be unified.
            </summary>
        </member>
        <member name="T:System.Compiler.Unstacker">
            <summary>
            Walks a normalized IR, removing push, pop and dup instructions, replacing them with references to local variables.
            Requires all Blocks to be basic blocks. I.e. any transfer statement is always the last statement in a block.
            (This precondition is established by Reader but not by Normalizer.)
            </summary>
        </member>
        <member name="M:System.Compiler.Ir2md.VisitLocalDeclarationsStatement(System.Compiler.LocalDeclarationsStatement)">
            <summary>
            This just gets the local variable index for each local declaration.
            That associates the debug information with the right block because
            it is the block the local is declared in rather than the subblock
            it is first referenced in. (When different, the debugger only knows
            about the local when control is in the subblock.)
            </summary>
            <param name="localDeclarations">The list of locals declared at this statement</param>
        </member>
    </members>
</doc>
