<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Reactive</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.AsyncSubject`1">
            <summary>
            Represents the result of an asynchronous operation.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ISubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ISubject`2">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncSubject`1.#ctor">
            <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncSubject`1.#ctor(System.Concurrency.IScheduler)">
            <summary>
            Creates a subject that can only receive one value and that value is cached for all future observations.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncSubject`1.OnNext(`0)">
            <summary>
            Notifies all subscribed observers with the value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncSubject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception. 
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncSubject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.AsyncSubject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.BehaviorSubject`1">
            <summary>
            Represents a value that changes over time.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ReplaySubject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Concurrency.IScheduler)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32,System.Concurrency.IScheduler)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.Int32)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.#ctor(System.TimeSpan)">
            <summary>
            Creates a replayable subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.OnNext(`0)">
            <summary>
            Notifies all subscribed observers with the value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReplaySubject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.BehaviorSubject`1.#ctor(`0,System.Concurrency.IScheduler)">
            <summary>
            Creates a subject that caches its last value and starts with the specified value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.BehaviorSubject`1.#ctor(`0)">
            <summary>
            Creates a subject that caches its last value and starts with the specified value.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ConnectableObservable`1">
            <summary>
            Represents an observable that can be connected and disconnected from its source.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IConnectableObservable`1">
            <summary>
            Represents an observable that can be connected and disconnected.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IConnectableObservable`1.Connect">
            <summary>
            Connects the observable.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ConnectableObservable`1.#ctor(System.IObservable{`0},System.Collections.Generic.ISubject{`0})">
            <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ConnectableObservable`1.#ctor(System.IObservable{`0})">
            <summary>
            Creates an observable that can be connected and disconnected from its source.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ConnectableObservable`1.Connect">
            <summary>
            Connects the observable to its source.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ConnectableObservable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the observable sequence.
            </summary>
        </member>
        <member name="T:System.IQbservable`1">
            <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.
            </summary>
        </member>
        <member name="T:System.IQbservable">
            <summary>
            Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.
            </summary>
        </member>
        <member name="P:System.IQbservable.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of IQbservable is executed.
            </summary>
        </member>
        <member name="P:System.IQbservable.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of IQbservable.
            </summary>
        </member>
        <member name="P:System.IQbservable.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
        </member>
        <member name="T:System.IQbservableProvider">
            <summary>
            Defines methods to create and execute queries that are described by an IQbservable object.
            </summary>
        </member>
        <member name="M:System.IQbservableProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Constructs an IQbservable&gt;TResult&lt; object that can evaluate the query represented by a specified expression tree.
            </summary>
        </member>
        <member name="T:System.Joins.Pattern">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="T:System.Joins.Pattern`1">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Joins.Pattern`1.Then``1(System.Func{`0,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Joins.Pattern`2">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Joins.Pattern`2.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Joins.Pattern`2.Then``1(System.Func{`0,`1,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Joins.Pattern`3">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Joins.Pattern`3.And``1(System.IObservable{``0})">
            <summary>
            Matches when all observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Joins.Pattern`3.Then``1(System.Func{`0,`1,`2,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Joins.Pattern`4">
            <summary>
            Represents a join pattern.
            </summary>
        </member>
        <member name="M:System.Joins.Pattern`4.Then``1(System.Func{`0,`1,`2,`3,``0})">
            <summary>
            Matches when all observable sequences have an available value and projects the values.
            </summary>
        </member>
        <member name="T:System.Joins.Plan`1">
            <summary>
            Represents an execution plan for join patterns.
            </summary>    
        </member>
        <member name="T:System.Linq.Notification">
            <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
        </member>
        <member name="M:System.Linq.Notification.ToObservable``1(System.Collections.Generic.Notification{``0})">
            <summary>
            Returns an observable sequence with a single notification.
            </summary>
        </member>
        <member name="M:System.Linq.Notification.ToObservable``1(System.Collections.Generic.Notification{``0},System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence with a single notification.
            </summary>
        </member>
        <member name="T:System.Linq.Observable">
            <summary>
            Provides a set of static methods for query operations over observable sequences.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Aggregate``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence. 
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Aggregate``1(System.IObservable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.IsEmpty``1(System.IObservable{``0})">
            <summary>
            Determines whether an observable sequence is empty.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Any``1(System.IObservable{``0})">
            <summary>
            Determines whether an observable sequence contains any elements.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Any``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of an observable sequence satisfies a condition.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.All``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of an observable sequence satisfy a condition.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Contains``1(System.IObservable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether an observable sequence contains a specified element by using a specified System.Collections.Generic.IEqualityComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Contains``1(System.IObservable{``0},``0)">
            <summary>
            Determines whether an observable sequence contains a specified element by using the default equality comparer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Count``1(System.IObservable{``0})">
            <summary>
            Returns an System.Int32 that represents the total number of elements in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.LongCount``1(System.IObservable{``0})">
            <summary>
            Returns an System.Int64 that represents the total number of elements in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Double})">
            <summary>
            Computes the sum of a sequence of System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Single})">
            <summary>
            Computes the sum of a sequence of System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Int32})">
            <summary>
            Computes the sum of a sequence of System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Int64})">
            <summary>
            Computes the sum of a sequence of System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sum(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.MinBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min``1(System.IObservable{``0})">
            <summary>
            Returns the minimum value in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum value in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Double})">
            <summary>
            Returns the minimum value in an observable sequence of System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Single})">
            <summary>
            Returns the minimum value in an observable sequence of System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Decimal})">
            <summary>
            Returns the minimum value in an observable sequence of System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Int32})">
            <summary>
            Returns the minimum value in an observable sequence of System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Int64})">
            <summary>
            Returns the minimum value in an observable sequence of System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Min(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in an observable sequence of nullable System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.MaxBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the element in an observable sequence with the minimum key value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max``1(System.IObservable{``0})">
            <summary>
            Returns the minimum value in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max``1(System.IObservable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns the minimum value in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Double})">
            <summary>
            Returns the maximum value in an observable sequence of System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Single})">
            <summary>
            Returns the maximum value in an observable sequence of System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Decimal})">
            <summary>
            Returns the maximum value in an observable sequence of System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Int32})">
            <summary>
            Returns the maximum value in an observable sequence of System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Int64})">
            <summary>
            Returns the maximum value in an observable sequence of System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Max(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in an observable sequence of nullable System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Double})">
            <summary>
            Computes the average of an observable sequence of System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Single})">
            <summary>
            Computes the average of an observable sequence of System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Decimal})">
            <summary>
            Computes the average of an observable sequence of System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Int32})">
            <summary>
            Computes the average of an observable sequence of System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Int64})">
            <summary>
            Computes the average of an observable sequence of System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of an observable sequence of nullable System.Double values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of an observable sequence of nullable System.Float values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of an observable sequence of nullable System.Decimal values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of an observable sequence of nullable System.Int32 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Average(System.IObservable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of an observable sequence of nullable System.Int64 values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromAsyncPattern``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0})">
            <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromAsyncPattern``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1})">
            <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromAsyncPattern``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2})">
            <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``1(System.Func{``0})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``1(System.Func{``0},System.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``2(System.Func{``0,``1})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``2(System.Func{``0,``1},System.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``3(System.Func{``0,``1,``2},System.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``4(System.Func{``0,``1,``2,``3},System.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``5(System.Func{``0,``1,``2,``3,``4},System.Concurrency.IScheduler)">
            <summary>
            Converts the function into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync(System.Action)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync(System.Action,System.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``1(System.Action{``0})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``1(System.Action{``0},System.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``2(System.Action{``0,``1})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``2(System.Action{``0,``1},System.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``3(System.Action{``0,``1,``2},System.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3})">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToAsync``4(System.Action{``0,``1,``2,``3},System.Concurrency.IScheduler)">
            <summary>
            Converts the action into an asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Start``1(System.Func{``0})">
            <summary>
            Invokes the function asynchronously.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Start``1(System.Func{``0},System.Concurrency.IScheduler)">
            <summary>
            Invokes the function asynchronously.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Start(System.Action)">
            <summary>
            Invokes the action asynchronously.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Start(System.Action,System.Concurrency.IScheduler)">
            <summary>
            Invokes the action asynchronously.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromAsyncPattern(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromAsyncPattern``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromAsyncPattern``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
            <summary>
            Converts a Begin/End invoke function pair into a asynchronous function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Let``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Bind the source to the parameter without sharing subscription side-effects.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.RefCount``1(System.Collections.Generic.IConnectableObservable{``0})">
            <summary>
            Returns an observable sequence that stays connected to the source as long as there is at least one subscription to the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Prune``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Prune``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Prune``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Prune``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source containing only the last notification.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0})">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying all notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``1(System.IObservable{``0},System.Int32,System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Replay``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},System.Int32,System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source replaying bufferSize notifications within window.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``1(System.IObservable{``0},``0)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``1(System.IObservable{``0},``0,System.Concurrency.IScheduler)">
            <summary>
            Returns a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Publish``2(System.IObservable{``0},System.Func{System.IObservable{``0},System.IObservable{``1}},``0,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying source and starts with initialValue.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToEnumerable``1(System.IObservable{``0})">
            <summary>
            Converts an observable sequence to an enumerable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GetEnumerator``1(System.IObservable{``0})">
            <summary>
            Returns an enumerator that enumerates all values of the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.MostRecent``1(System.IObservable{``0},``0)">
            <summary>
            Samples the most recent value (buffer of size one without consumption) in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Next``1(System.IObservable{``0})">
            <summary>
            Samples the next value (blocking without buffering) from in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Latest``1(System.IObservable{``0})">
            <summary>
            Samples the most recent value (buffer of size one with consumption) in an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.First``1(System.IObservable{``0})">
            <summary>
            Returns the first value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FirstOrDefault``1(System.IObservable{``0})">
            <summary>
            Returns the first value of an observable sequence, or a default value if no value is found.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Last``1(System.IObservable{``0})">
            <summary>
            Returns the last value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.LastOrDefault``1(System.IObservable{``0})">
            <summary>
            Returns the last value of an observable sequence, or a default value if no value is found.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Single``1(System.IObservable{``0})">
            <summary>
            Returns the only value of an observable sequence, and throws an exception if there is not exactly one value in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SingleOrDefault``1(System.IObservable{``0})">
            <summary>
            Returns the only value of an observable sequence, or a default value if the observable sequence is empty; this method throws an exception if there is more than one value in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0})">
            <summary>
            Invokes the observable sequence for its side-effects and blocks till the sequence is terminated.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.IObserver{``0})">
            <summary>
            Invokes the observer methods for their side-effects and blocks till the sequence is terminated.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Run``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence and blocks till the sequence is terminated.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Asynchronously notify observers using the scheduler.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Asynchronously subscribes and unsubscribes observers using scheduler.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Concurrency.DispatcherScheduler)">
            <summary>
            Asynchronously notify observers using the scheduler.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ObserveOnDispatcher``1(System.IObservable{``0})">
            <summary>
            Asynchronously notify observers using the current dispatcher.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SubscribeOnDispatcher``1(System.IObservable{``0})">
            <summary>
            Asynchronously subscribes and unsubscribes observers using the current dispatcher.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Concurrency.DispatcherScheduler)">
            <summary>
            Asynchronously subscribes and unsubscribes observers using the scheduler.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SubscribeOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>
            Asynchronously subscribes and unsubscribes observers on the synchronization context.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ObserveOn``1(System.IObservable{``0},System.Threading.SynchronizationContext)">
            <summary>
            Asynchronously notify observers on the synchronization context.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Synchronize``1(System.IObservable{``0})">
            <summary>
            Synchronizes the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Synchronize``1(System.IObservable{``0},System.Object)">
            <summary>
            Synchronizes the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Never``1">
            <summary>
            Returns a non-terminating observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Empty``1">
            <summary>
            Returns an empty observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Empty``1(System.Concurrency.IScheduler)">
            <summary>
            Returns an empty observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Return``1(``0)">
            <summary>
            Returns an observable sequence that contains a single value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Return``1(``0,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that contains a single value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Throw``1(System.Exception)">
            <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Throw``1(System.Exception,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that terminates with an exception.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0})">
            <summary>
            Subscribes an observer to an enumerable sequence.  Returns an object that can be used to unsubscribe the observer from the enumerable.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Subscribe``1(System.Collections.Generic.IEnumerable{``0},System.IObserver{``0},System.Concurrency.IScheduler)">
            <summary>
            Subscribes an observer to an enumerable sequence.  Returns an object that can be used to unsubscribe the observer from the enumerable.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromEvent(System.Action{System.EventHandler},System.Action{System.EventHandler})">
            <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromEvent``2(System.Func{System.EventHandler{``1},``0},System.Action{``0},System.Action{``0})">
            <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromEvent``1(System.Action{System.EventHandler{``0}},System.Action{System.EventHandler{``0}})">
            <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.FromEvent``1(System.Object,System.String)">
            <summary>
            Returns an observable sequence that contains the values of the underlying .NET event.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0},System.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Generate``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``0})">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Defer``1(System.Func{System.IObservable{``0}})">
            <summary>
            Returns an observable sequence that invokes the observableFactory function whenever a new observer subscribes.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Using``2(System.Func{``1},System.Func{``1,System.IObservable{``0}})">
            <summary>
            Retrieves resource from resourceSelector for use in resourceUsage and disposes 
            the resource once the resulting observable sequence terminates.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ToObservable``1(System.Collections.Generic.IEnumerable{``0},System.Concurrency.IScheduler)">
            <summary>
            Converts an enumerable sequence to an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.CreateWithDisposable``1(System.Func{System.IObserver{``0},System.IDisposable})">
            <summary>
            Creates an observable sequence from the subscribe implementation.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Create``1(System.Func{System.IObserver{``0},System.Action})">
            <summary>
            Creates an observable sequence from the subscribe implementation.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Range(System.Int32,System.Int32)">
            <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Range(System.Int32,System.Int32,System.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence of integral numbers within a specified range.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Repeat``1(System.IObservable{``0})">
            <summary>
            Repeats the observable sequence indefinitely.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Repeat``1(System.IObservable{``0},System.Int32)">
            <summary>
            Repeats the observable sequence repeatCount times.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Retry``1(System.IObservable{``0})">
            <summary>
            Repeats the source observable sequence until it successfully terminates.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Retry``1(System.IObservable{``0},System.Int32)">
            <summary>
            Repeats the source observable sequence the retryCount times or until it successfully terminates.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Repeat``1(``0,System.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Repeat``1(``0,System.Int32,System.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Repeat``1(``0)">
            <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates an observable sequence that contains one repeated value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.And``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Matches when both observable sequences have an available value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Then``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Matches when the observable sequence has an available value and projects the value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Join``1(System.Joins.Plan{``0}[])">
            <summary>
            Joins together the results from several patterns.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Join``1(System.Collections.Generic.IEnumerable{System.Joins.Plan{``0}})">
            <summary>
            Joins together the results from several patterns.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Merges an observable sequence of observable sequences into an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Switch``1(System.IObservable{System.IObservable{``0}})">
            <summary>
            Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Concat``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Concatenates two observable sequences.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Concat``1(System.IObservable{``0}[])">
            <summary>
            Concatenates all the observable sequences.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Concat``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Concatenates all the observable sequences.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Catch``2(System.IObservable{``0},System.Func{``1,System.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated by an exception of the specified type with the observable sequence
            produced by the handler.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Catch``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Catch``1(System.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Catch``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.OnErrorResumeNext``1(System.IObservable{``0}[])">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.OnErrorResumeNext``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Zip``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two observable sequences into one observable sequence by using the selector function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Zip``3(System.IObservable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges an observable sequence and an enumerable sequence into one observable sequence by using the selector function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.CombineLatest``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>
            Merges two observable sequences into one observable sequence by using the selector function
            whenever one of the observable sequences has a new value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Amb``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Returns the observable sequence that reacts first.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Amb``1(System.IObservable{``0}[])">
            <summary>
            Returns the observable sequence that reacts first.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Amb``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Returns the observable sequence that reacts first.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ForkJoin``3(System.IObservable{``0},System.IObservable{``1},System.Func{``0,``1,``2})">
            <summary>
            Runs two observable sequences in parallel and combines their last values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ForkJoin``1(System.IObservable{``0}[])">
            <summary>
            Runs all observable sequences in parallel and combines their last values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.ForkJoin``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Runs all observable sequences in parallel and combines their last values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.TakeUntil``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Returns the values from the source observable sequence until the other observable sequence produces a value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SkipUntil``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Returns the values from the source observable sequence only after the other observable sequence produces a value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.IObservable{``0},System.IObservable{``0})">
            <summary>
            Merges two observable sequences into a single observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.IObservable{``0}[])">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.Concurrency.IScheduler,System.IObservable{``0}[])">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}})">
            <summary>
            Merges all the observable sequences into a single observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Merge``1(System.Collections.Generic.IEnumerable{System.IObservable{``0}},System.Concurrency.IScheduler)">
            <summary>
            Merges an observable sequence of observable sequences into an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.AsQbservable``1(System.IObservable{``0})">
            <summary>
            Converts an observable sequence into a queryable observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Materialize``1(System.IObservable{``0})">
            <summary>
            Materializes the implicit notifications of an observable sequence as explicit notification values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Dematerialize``1(System.IObservable{System.Collections.Generic.Notification{``0}})">
            <summary>
            Dematerializes the explicit notification values of an observable sequence as implicit notifications.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.AsObservable``1(System.IObservable{``0})">
            <summary>
            Hides the identity of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32,System.Int32)">
            <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithCount``1(System.IObservable{``0},System.Int32)">
            <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.StartWith``1(System.IObservable{``0},``0[])">
            <summary>
            Prepends a sequence values to an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.StartWith``1(System.IObservable{``0},System.Concurrency.IScheduler,``0[])">
            <summary>
            Prepends a sequence values to an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Scan``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            The specified seed value is used as the initial accumulator value.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Scan0``2(System.IObservable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            The specified seed value is prepended to the sequence once a message comes in.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Scan``1(System.IObservable{``0},System.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over an observable sequence and returns each intermediate result.  
            </summary>
        </member>
        <member name="M:System.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the keySelector and comparer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the comparer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.DistinctUntilChanged``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous values according to the keySelector.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.DistinctUntilChanged``1(System.IObservable{``0})">
            <summary>
            Returns an observable sequence that contains only distinct contiguous values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Finally``1(System.IObservable{``0},System.Action)">
            <summary>
            Invokes finallyAction after source observable sequence terminates normally or by an exception.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Invokes the action for its side-effects on each value in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Do``1(System.IObservable{``0},System.IObserver{``0})">
            <summary>
            Invokes the observer's methods for their side-effects.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.While``1(System.Func{System.Boolean},System.IObservable{``0})">
            <summary>
            Repeats source as long as condition holds.
            </summary>        
        </member>
        <member name="M:System.Linq.Observable.If``1(System.Func{System.Boolean},System.IObservable{``0},System.IObservable{``0})">
            <summary>
            If condition is true, then thenSource else elseSource.
            </summary>        
        </member>
        <member name="M:System.Linq.Observable.DoWhile``1(System.IObservable{``0},System.Func{System.Boolean})">
            <summary>
            Repeats source as long as condition holds.
            </summary>   
        </member>
        <member name="M:System.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.IObservable{``1})">
            <summary>
            Uses selector to determine which source in sources to use, uses defaultSource if no match is found.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}},System.Concurrency.IScheduler)">
            <summary>
            Uses selector to determine which source in sources to use, empty if no match is found.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Case``2(System.Func{``0},System.Collections.Generic.IDictionary{``0,System.IObservable{``1}})">
            <summary>
            Uses selector to determine which source in sources to use, empty if no match is found.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.For``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>
            Concatenates the observable sequences obtained by running the resultSelector for each element in source.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Let``2(``0,System.Func{``0,System.IObservable{``1}})">
            <summary>
            Returns an observable sequence that invokes selector with value whenever a new observer subscribes.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SkipLast``1(System.IObservable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of values at the end of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.TakeLast``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous values from the end of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Iterate``1(System.Func{System.IObserver{``0},System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}})">
            <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and returns the observable sequence of values sent to the observer given to the iteratorMethod.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Iterate(System.Func{System.Collections.Generic.IEnumerable{System.IObservable{System.Object}}})">
            <summary>
            Subscribes to each observable sequence returned by the iteratorMethod in sequence and returns the observable sequence of values sent to the observer given to the iteratorMethod.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Start``1(System.IObservable{``0})">
            <summary>
            Immediately subscribes to source and retains the values in the observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Projects each value of an observable sequence into a new form.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Select``2(System.IObservable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each value of an observable sequence into a new form by incorporating the element's index.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters the values of an observable sequence based on a predicate.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Where``1(System.IObservable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters the values of an observable sequence based on a predicate by incorporating the element's index.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Groups the elements of an observable sequence and selects the resulting elements by using a specified function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GroupBy``2(System.IObservable{``0},System.Func{``0,``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GroupBy``3(System.IObservable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Take``1(System.IObservable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous values from the start of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Skip``1(System.IObservable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of values in an observable sequence and then returns the remaining values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.TakeWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns values from an observable sequence as long as a specified condition is true, and then skips the remaining values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SkipWhile``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses values in an observable sequence as long as a specified condition is true and then returns the remaining values.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.IObservable{``1})">
            <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}})">
            <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{System.Exception,System.IObservable{``1}},System.Func{System.IObservable{``1}})">
            <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SelectMany``2(System.IObservable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each value of an observable sequence to an observable sequence and flattens the resulting observable sequences into one observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.SelectMany``3(System.IObservable{``0},System.Func{``0,System.IObservable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects each value of an observable sequence to an observable sequence, flattens the resulting observable sequences into one observable sequence, and invokes a result selector function on each value therein.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.OfType``1(System.IObservable{System.Object})">
            <summary>
            Filters values of the given type.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Cast``1(System.IObservable{System.Object})">
            <summary>
            Casts values to the given type.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Interval(System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Interval(System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after each period.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value after the dueTime has elapsed.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset)">
            <summary>
            Returns an observable sequence that produces a value at dueTime.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Returns an observable sequence that produces a value at dueTime and then after each period.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after the dueTime has elapsed.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value at dueTime.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.TimeSpan,System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timer(System.DateTimeOffset,System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns an observable sequence that produces a value at dueTime and then after each period.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Delay``1(System.IObservable{``0},System.DateTimeOffset,System.Concurrency.IScheduler)">
            <summary>
            Time shifts the observable sequence by dueTime.
            The relative time intervals between the values are preserved.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Throttle``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Ignores values from an observable sequence which are followed by another value before dueTime.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan,System.TimeSpan)">
            <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithTime``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Projects each value of an observable sequence into a buffer.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32,System.Concurrency.IScheduler)">
            <summary>
            Projects each value of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.BufferWithTimeOrCount``1(System.IObservable{``0},System.TimeSpan,System.Int32)">
            <summary>
            Projects each value of an observable sequence into a buffer that's sent out when either it's full or a given amount of time has elapsed.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.TimeInterval``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Records the time interval for each value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.TimeInterval``1(System.IObservable{``0})">
            <summary>
            Records the time interval for each value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.RemoveTimeInterval``1(System.IObservable{System.Linq.TimeInterval{``0}})">
            <summary>
            Removes the timestamp from each value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timestamp``1(System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Records the timestamp for each value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timestamp``1(System.IObservable{``0})">
            <summary>
            Records the timestamp for each value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.RemoveTimestamp``1(System.IObservable{System.Linq.Timestamped{``0}})">
            <summary>
            Removes the timestamp from each value of an observable sequence.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Sample``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Samples the observable sequence at each interval.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0})">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0})">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.Concurrency.IScheduler)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.TimeSpan,System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.Concurrency.IScheduler)">
            <summary>
            Returns either the observable sequence or an TimeoutException if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.Timeout``1(System.IObservable{``0},System.DateTimeOffset,System.IObservable{``0},System.Concurrency.IScheduler)">
            <summary>
            Returns the source observable sequence or the other observable sequence if dueTime elapses.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Func{``0,``0},System.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.TimeSpan},System.Func{``0,``0})">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Func{``0,``0},System.Concurrency.IScheduler)">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
        </member>
        <member name="M:System.Linq.Observable.GenerateWithTime``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,System.DateTimeOffset},System.Func{``0,``0})">
            <summary>
            Generates an observable sequence by iterating a state from an initial state until
            the condition fails.
            </summary>
        </member>
        <member name="P:System.Linq.Observable.Provider">
            <summary>
            Gets the local Qbservable provider.
            </summary>
        </member>
        <member name="T:System.ObservableExtensions">
            <summary>
            Provides a set of static methods for subscribing delegates to observables.
            </summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0})">
            <summary>
            Evaluates the observable sequence.
            </summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0})">
            <summary>
            Subscribes a value handler to an observable sequence.
            </summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Subscribes a value handler and an exception handler to an observable sequence.
            </summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action)">
            <summary>
            Subscribes a value handler and a completion handler to an observable sequence.
            </summary>
        </member>
        <member name="M:System.ObservableExtensions.Subscribe``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Subscribes a value handler, an exception handler, and a completion handler to an observable sequence.
            </summary>
        </member>
        <member name="T:System.Linq.Observer">
            <summary>
            Provides a set of static methods for creating observers.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.ToObserver``1(System.Action{System.Collections.Generic.Notification{``0}})">
            <summary>
            Creates an observer from a notification callback.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.ToNotifier``1(System.IObserver{``0})">
            <summary>
            Creates a notification callback from an observer.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.Create``1(System.Action{``0})">
            <summary>
            Creates an observer from the specified OnNext action.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.Create``1(System.Action{``0},System.Action{System.Exception})">
            <summary>
            Creates an observer from the specified OnNext and OnError actions.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.Create``1(System.Action{``0},System.Action)">
            <summary>
            Creates an observer from the specified OnNext and OnCompleted actions.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.Create``1(System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
            </summary>
        </member>
        <member name="M:System.Linq.Observer.AsObserver``1(System.IObserver{``0})">
            <summary>
            Hides the identity of an observer.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.ListObservable`1">
            <summary>
            Represents an object that retains the values of the observable sequence and signals the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.#ctor(System.IObservable{`0})">
            <summary>
            Constructs an object that retains the values of source and signals the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the ListObservable.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the ListObservable at the specified index.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.RemoveAt(System.Int32)">
            <summary>
            Removes the ListObservable item at the specified index.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.Add(`0)">
            <summary>
            Adds an item to the ListObservable.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.Clear">
            <summary>
            Removes all items from the ListObservable.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.Contains(`0)">
            <summary>
            Determines whether the ListObservable contains a specific value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the ListObservable to an System.Array, starting at a particular System.Array index.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ListObservable.
            </summary>        
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListObservable`1.Subscribe(System.IObserver{System.Object})">
            <summary>
            Subscribes an observer to the ListObservable which will be notified upon completion.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ListObservable`1.Value">
            <summary>
            Returns the last value of the observable sequence.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ListObservable`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ListObservable`1.Count">
            <summary>
            Gets the number of elements contained in the ListObservable.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ListObservable`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the ListObservable is read-only.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Subject`1">
            <summary>
            Represents an object that is both an observable sequence as well as an observer.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Subject`1.#ctor(System.Concurrency.IScheduler)">
            <summary>
            Creates a subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Subject`1.#ctor">
            <summary>
            Creates a subject.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Subject`1.OnNext(`0)">
            <summary>
            Notifies all subscribed observers with the value.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Subject`1.OnError(System.Exception)">
            <summary>
            Notifies all subscribed observers with the exception.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Subject`1.OnCompleted">
            <summary>
            Notifies all subscribed observers of the end of the sequence.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Subject`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an observer to the subject.
            </summary>
        </member>
        <member name="T:System.Linq.IGroupedObservable`2">
            <summary>
            Represents an observable sequence of values that have a common key.
            </summary>
        </member>
        <member name="P:System.Linq.IGroupedObservable`2.Key">
            <summary>
            Gets the common key.
            </summary>
        </member>
        <member name="T:System.Windows.Threading.DispatcherObservableExtensions">
            <summary>
            Provides a set of static methods for subscribing to IObservables using Dispatchers.
            </summary>
        </member>
        <member name="M:System.Windows.Threading.DispatcherObservableExtensions.ObserveOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
            <summary>
            Asynchronously notify observers using the dispatcher.
            </summary>
        </member>
        <member name="M:System.Windows.Threading.DispatcherObservableExtensions.SubscribeOn``1(System.IObservable{``0},System.Windows.Threading.Dispatcher)">
            <summary>
            Asynchronously subscribes and unsubscribes observers using the dispatcher.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskObservableExtensions">
            <summary>
            Provides a set of static methods for converting Tasks to IObservables.
            </summary>
        </member>
    </members>
</doc>
